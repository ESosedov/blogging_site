/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/
(() => { // webpackBootstrap
    /******/
    var __webpack_modules__ = ({

        /***/ "./resources/assets/front/js/bootstrap.min.js":
        /*!****************************************************!*\
          !*** ./resources/assets/front/js/bootstrap.min.js ***!
          \****************************************************/
        /***/ (() => {

            eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\n * Bootstrap v3.3.5 (http://getbootstrap.com)\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under the MIT license\n */\nif (\"undefined\" == typeof jQuery) throw new Error(\"Bootstrap's JavaScript requires jQuery\");\n+function (a) {\n  \"use strict\";\n\n  var b = a.fn.jquery.split(\" \")[0].split(\".\");\n  if (b[0] < 2 && b[1] < 9 || 1 == b[0] && 9 == b[1] && b[2] < 1) throw new Error(\"Bootstrap's JavaScript requires jQuery version 1.9.1 or higher\");\n}(jQuery), +function (a) {\n  \"use strict\";\n\n  function b() {\n    var a = document.createElement(\"bootstrap\"),\n        b = {\n      WebkitTransition: \"webkitTransitionEnd\",\n      MozTransition: \"transitionend\",\n      OTransition: \"oTransitionEnd otransitionend\",\n      transition: \"transitionend\"\n    };\n\n    for (var c in b) {\n      if (void 0 !== a.style[c]) return {\n        end: b[c]\n      };\n    }\n\n    return !1;\n  }\n\n  a.fn.emulateTransitionEnd = function (b) {\n    var c = !1,\n        d = this;\n    a(this).one(\"bsTransitionEnd\", function () {\n      c = !0;\n    });\n\n    var e = function e() {\n      c || a(d).trigger(a.support.transition.end);\n    };\n\n    return setTimeout(e, b), this;\n  }, a(function () {\n    a.support.transition = b(), a.support.transition && (a.event.special.bsTransitionEnd = {\n      bindType: a.support.transition.end,\n      delegateType: a.support.transition.end,\n      handle: function handle(b) {\n        return a(b.target).is(this) ? b.handleObj.handler.apply(this, arguments) : void 0;\n      }\n    });\n  });\n}(jQuery), +function (a) {\n  \"use strict\";\n\n  function b(b) {\n    return this.each(function () {\n      var c = a(this),\n          e = c.data(\"bs.alert\");\n      e || c.data(\"bs.alert\", e = new d(this)), \"string\" == typeof b && e[b].call(c);\n    });\n  }\n\n  var c = '[data-dismiss=\"alert\"]',\n      d = function d(b) {\n    a(b).on(\"click\", c, this.close);\n  };\n\n  d.VERSION = \"3.3.5\", d.TRANSITION_DURATION = 150, d.prototype.close = function (b) {\n    function c() {\n      g.detach().trigger(\"closed.bs.alert\").remove();\n    }\n\n    var e = a(this),\n        f = e.attr(\"data-target\");\n    f || (f = e.attr(\"href\"), f = f && f.replace(/.*(?=#[^\\s]*$)/, \"\"));\n    var g = a(f);\n    b && b.preventDefault(), g.length || (g = e.closest(\".alert\")), g.trigger(b = a.Event(\"close.bs.alert\")), b.isDefaultPrevented() || (g.removeClass(\"in\"), a.support.transition && g.hasClass(\"fade\") ? g.one(\"bsTransitionEnd\", c).emulateTransitionEnd(d.TRANSITION_DURATION) : c());\n  };\n  var e = a.fn.alert;\n  a.fn.alert = b, a.fn.alert.Constructor = d, a.fn.alert.noConflict = function () {\n    return a.fn.alert = e, this;\n  }, a(document).on(\"click.bs.alert.data-api\", c, d.prototype.close);\n}(jQuery), +function (a) {\n  \"use strict\";\n\n  function b(b) {\n    return this.each(function () {\n      var d = a(this),\n          e = d.data(\"bs.button\"),\n          f = \"object\" == _typeof(b) && b;\n      e || d.data(\"bs.button\", e = new c(this, f)), \"toggle\" == b ? e.toggle() : b && e.setState(b);\n    });\n  }\n\n  var c = function c(b, d) {\n    this.$element = a(b), this.options = a.extend({}, c.DEFAULTS, d), this.isLoading = !1;\n  };\n\n  c.VERSION = \"3.3.5\", c.DEFAULTS = {\n    loadingText: \"loading...\"\n  }, c.prototype.setState = function (b) {\n    var c = \"disabled\",\n        d = this.$element,\n        e = d.is(\"input\") ? \"val\" : \"html\",\n        f = d.data();\n    b += \"Text\", null == f.resetText && d.data(\"resetText\", d[e]()), setTimeout(a.proxy(function () {\n      d[e](null == f[b] ? this.options[b] : f[b]), \"loadingText\" == b ? (this.isLoading = !0, d.addClass(c).attr(c, c)) : this.isLoading && (this.isLoading = !1, d.removeClass(c).removeAttr(c));\n    }, this), 0);\n  }, c.prototype.toggle = function () {\n    var a = !0,\n        b = this.$element.closest('[data-toggle=\"buttons\"]');\n\n    if (b.length) {\n      var c = this.$element.find(\"input\");\n      \"radio\" == c.prop(\"type\") ? (c.prop(\"checked\") && (a = !1), b.find(\".active\").removeClass(\"active\"), this.$element.addClass(\"active\")) : \"checkbox\" == c.prop(\"type\") && (c.prop(\"checked\") !== this.$element.hasClass(\"active\") && (a = !1), this.$element.toggleClass(\"active\")), c.prop(\"checked\", this.$element.hasClass(\"active\")), a && c.trigger(\"change\");\n    } else this.$element.attr(\"aria-pressed\", !this.$element.hasClass(\"active\")), this.$element.toggleClass(\"active\");\n  };\n  var d = a.fn.button;\n  a.fn.button = b, a.fn.button.Constructor = c, a.fn.button.noConflict = function () {\n    return a.fn.button = d, this;\n  }, a(document).on(\"click.bs.button.data-api\", '[data-toggle^=\"button\"]', function (c) {\n    var d = a(c.target);\n    d.hasClass(\"btn\") || (d = d.closest(\".btn\")), b.call(d, \"toggle\"), a(c.target).is('input[type=\"radio\"]') || a(c.target).is('input[type=\"checkbox\"]') || c.preventDefault();\n  }).on(\"focus.bs.button.data-api blur.bs.button.data-api\", '[data-toggle^=\"button\"]', function (b) {\n    a(b.target).closest(\".btn\").toggleClass(\"focus\", /^focus(in)?$/.test(b.type));\n  });\n}(jQuery), +function (a) {\n  \"use strict\";\n\n  function b(b) {\n    return this.each(function () {\n      var d = a(this),\n          e = d.data(\"bs.carousel\"),\n          f = a.extend({}, c.DEFAULTS, d.data(), \"object\" == _typeof(b) && b),\n          g = \"string\" == typeof b ? b : f.slide;\n      e || d.data(\"bs.carousel\", e = new c(this, f)), \"number\" == typeof b ? e.to(b) : g ? e[g]() : f.interval && e.pause().cycle();\n    });\n  }\n\n  var c = function c(b, _c) {\n    this.$element = a(b), this.$indicators = this.$element.find(\".carousel-indicators\"), this.options = _c, this.paused = null, this.sliding = null, this.interval = null, this.$active = null, this.$items = null, this.options.keyboard && this.$element.on(\"keydown.bs.carousel\", a.proxy(this.keydown, this)), \"hover\" == this.options.pause && !(\"ontouchstart\" in document.documentElement) && this.$element.on(\"mouseenter.bs.carousel\", a.proxy(this.pause, this)).on(\"mouseleave.bs.carousel\", a.proxy(this.cycle, this));\n  };\n\n  c.VERSION = \"3.3.5\", c.TRANSITION_DURATION = 600, c.DEFAULTS = {\n    interval: 5e3,\n    pause: \"hover\",\n    wrap: !0,\n    keyboard: !0\n  }, c.prototype.keydown = function (a) {\n    if (!/input|textarea/i.test(a.target.tagName)) {\n      switch (a.which) {\n        case 37:\n          this.prev();\n          break;\n\n        case 39:\n          this.next();\n          break;\n\n        default:\n          return;\n      }\n\n      a.preventDefault();\n    }\n  }, c.prototype.cycle = function (b) {\n    return b || (this.paused = !1), this.interval && clearInterval(this.interval), this.options.interval && !this.paused && (this.interval = setInterval(a.proxy(this.next, this), this.options.interval)), this;\n  }, c.prototype.getItemIndex = function (a) {\n    return this.$items = a.parent().children(\".item\"), this.$items.index(a || this.$active);\n  }, c.prototype.getItemForDirection = function (a, b) {\n    var c = this.getItemIndex(b),\n        d = \"prev\" == a && 0 === c || \"next\" == a && c == this.$items.length - 1;\n    if (d && !this.options.wrap) return b;\n    var e = \"prev\" == a ? -1 : 1,\n        f = (c + e) % this.$items.length;\n    return this.$items.eq(f);\n  }, c.prototype.to = function (a) {\n    var b = this,\n        c = this.getItemIndex(this.$active = this.$element.find(\".item.active\"));\n    return a > this.$items.length - 1 || 0 > a ? void 0 : this.sliding ? this.$element.one(\"slid.bs.carousel\", function () {\n      b.to(a);\n    }) : c == a ? this.pause().cycle() : this.slide(a > c ? \"next\" : \"prev\", this.$items.eq(a));\n  }, c.prototype.pause = function (b) {\n    return b || (this.paused = !0), this.$element.find(\".next, .prev\").length && a.support.transition && (this.$element.trigger(a.support.transition.end), this.cycle(!0)), this.interval = clearInterval(this.interval), this;\n  }, c.prototype.next = function () {\n    return this.sliding ? void 0 : this.slide(\"next\");\n  }, c.prototype.prev = function () {\n    return this.sliding ? void 0 : this.slide(\"prev\");\n  }, c.prototype.slide = function (b, d) {\n    var e = this.$element.find(\".item.active\"),\n        f = d || this.getItemForDirection(b, e),\n        g = this.interval,\n        h = \"next\" == b ? \"left\" : \"right\",\n        i = this;\n    if (f.hasClass(\"active\")) return this.sliding = !1;\n    var j = f[0],\n        k = a.Event(\"slide.bs.carousel\", {\n      relatedTarget: j,\n      direction: h\n    });\n\n    if (this.$element.trigger(k), !k.isDefaultPrevented()) {\n      if (this.sliding = !0, g && this.pause(), this.$indicators.length) {\n        this.$indicators.find(\".active\").removeClass(\"active\");\n        var l = a(this.$indicators.children()[this.getItemIndex(f)]);\n        l && l.addClass(\"active\");\n      }\n\n      var m = a.Event(\"slid.bs.carousel\", {\n        relatedTarget: j,\n        direction: h\n      });\n      return a.support.transition && this.$element.hasClass(\"slide\") ? (f.addClass(b), f[0].offsetWidth, e.addClass(h), f.addClass(h), e.one(\"bsTransitionEnd\", function () {\n        f.removeClass([b, h].join(\" \")).addClass(\"active\"), e.removeClass([\"active\", h].join(\" \")), i.sliding = !1, setTimeout(function () {\n          i.$element.trigger(m);\n        }, 0);\n      }).emulateTransitionEnd(c.TRANSITION_DURATION)) : (e.removeClass(\"active\"), f.addClass(\"active\"), this.sliding = !1, this.$element.trigger(m)), g && this.cycle(), this;\n    }\n  };\n  var d = a.fn.carousel;\n  a.fn.carousel = b, a.fn.carousel.Constructor = c, a.fn.carousel.noConflict = function () {\n    return a.fn.carousel = d, this;\n  };\n\n  var e = function e(c) {\n    var d,\n        e = a(this),\n        f = a(e.attr(\"data-target\") || (d = e.attr(\"href\")) && d.replace(/.*(?=#[^\\s]+$)/, \"\"));\n\n    if (f.hasClass(\"carousel\")) {\n      var g = a.extend({}, f.data(), e.data()),\n          h = e.attr(\"data-slide-to\");\n      h && (g.interval = !1), b.call(f, g), h && f.data(\"bs.carousel\").to(h), c.preventDefault();\n    }\n  };\n\n  a(document).on(\"click.bs.carousel.data-api\", \"[data-slide]\", e).on(\"click.bs.carousel.data-api\", \"[data-slide-to]\", e), a(window).on(\"load\", function () {\n    a('[data-ride=\"carousel\"]').each(function () {\n      var c = a(this);\n      b.call(c, c.data());\n    });\n  });\n}(jQuery), +function (a) {\n  \"use strict\";\n\n  function b(b) {\n    var c,\n        d = b.attr(\"data-target\") || (c = b.attr(\"href\")) && c.replace(/.*(?=#[^\\s]+$)/, \"\");\n    return a(d);\n  }\n\n  function c(b) {\n    return this.each(function () {\n      var c = a(this),\n          e = c.data(\"bs.collapse\"),\n          f = a.extend({}, d.DEFAULTS, c.data(), \"object\" == _typeof(b) && b);\n      !e && f.toggle && /show|hide/.test(b) && (f.toggle = !1), e || c.data(\"bs.collapse\", e = new d(this, f)), \"string\" == typeof b && e[b]();\n    });\n  }\n\n  var d = function d(b, c) {\n    this.$element = a(b), this.options = a.extend({}, d.DEFAULTS, c), this.$trigger = a('[data-toggle=\"collapse\"][href=\"#' + b.id + '\"],[data-toggle=\"collapse\"][data-target=\"#' + b.id + '\"]'), this.transitioning = null, this.options.parent ? this.$parent = this.getParent() : this.addAriaAndCollapsedClass(this.$element, this.$trigger), this.options.toggle && this.toggle();\n  };\n\n  d.VERSION = \"3.3.5\", d.TRANSITION_DURATION = 350, d.DEFAULTS = {\n    toggle: !0\n  }, d.prototype.dimension = function () {\n    var a = this.$element.hasClass(\"width\");\n    return a ? \"width\" : \"height\";\n  }, d.prototype.show = function () {\n    if (!this.transitioning && !this.$element.hasClass(\"in\")) {\n      var b,\n          e = this.$parent && this.$parent.children(\".panel\").children(\".in, .collapsing\");\n\n      if (!(e && e.length && (b = e.data(\"bs.collapse\"), b && b.transitioning))) {\n        var f = a.Event(\"show.bs.collapse\");\n\n        if (this.$element.trigger(f), !f.isDefaultPrevented()) {\n          e && e.length && (c.call(e, \"hide\"), b || e.data(\"bs.collapse\", null));\n          var g = this.dimension();\n          this.$element.removeClass(\"collapse\").addClass(\"collapsing\")[g](0).attr(\"aria-expanded\", !0), this.$trigger.removeClass(\"collapsed\").attr(\"aria-expanded\", !0), this.transitioning = 1;\n\n          var h = function h() {\n            this.$element.removeClass(\"collapsing\").addClass(\"collapse in\")[g](\"\"), this.transitioning = 0, this.$element.trigger(\"shown.bs.collapse\");\n          };\n\n          if (!a.support.transition) return h.call(this);\n          var i = a.camelCase([\"scroll\", g].join(\"-\"));\n          this.$element.one(\"bsTransitionEnd\", a.proxy(h, this)).emulateTransitionEnd(d.TRANSITION_DURATION)[g](this.$element[0][i]);\n        }\n      }\n    }\n  }, d.prototype.hide = function () {\n    if (!this.transitioning && this.$element.hasClass(\"in\")) {\n      var b = a.Event(\"hide.bs.collapse\");\n\n      if (this.$element.trigger(b), !b.isDefaultPrevented()) {\n        var c = this.dimension();\n        this.$element[c](this.$element[c]())[0].offsetHeight, this.$element.addClass(\"collapsing\").removeClass(\"collapse in\").attr(\"aria-expanded\", !1), this.$trigger.addClass(\"collapsed\").attr(\"aria-expanded\", !1), this.transitioning = 1;\n\n        var e = function e() {\n          this.transitioning = 0, this.$element.removeClass(\"collapsing\").addClass(\"collapse\").trigger(\"hidden.bs.collapse\");\n        };\n\n        return a.support.transition ? void this.$element[c](0).one(\"bsTransitionEnd\", a.proxy(e, this)).emulateTransitionEnd(d.TRANSITION_DURATION) : e.call(this);\n      }\n    }\n  }, d.prototype.toggle = function () {\n    this[this.$element.hasClass(\"in\") ? \"hide\" : \"show\"]();\n  }, d.prototype.getParent = function () {\n    return a(this.options.parent).find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]').each(a.proxy(function (c, d) {\n      var e = a(d);\n      this.addAriaAndCollapsedClass(b(e), e);\n    }, this)).end();\n  }, d.prototype.addAriaAndCollapsedClass = function (a, b) {\n    var c = a.hasClass(\"in\");\n    a.attr(\"aria-expanded\", c), b.toggleClass(\"collapsed\", !c).attr(\"aria-expanded\", c);\n  };\n  var e = a.fn.collapse;\n  a.fn.collapse = c, a.fn.collapse.Constructor = d, a.fn.collapse.noConflict = function () {\n    return a.fn.collapse = e, this;\n  }, a(document).on(\"click.bs.collapse.data-api\", '[data-toggle=\"collapse\"]', function (d) {\n    var e = a(this);\n    e.attr(\"data-target\") || d.preventDefault();\n    var f = b(e),\n        g = f.data(\"bs.collapse\"),\n        h = g ? \"toggle\" : e.data();\n    c.call(f, h);\n  });\n}(jQuery), +function (a) {\n  \"use strict\";\n\n  function b(b) {\n    var c = b.attr(\"data-target\");\n    c || (c = b.attr(\"href\"), c = c && /#[A-Za-z]/.test(c) && c.replace(/.*(?=#[^\\s]*$)/, \"\"));\n    var d = c && a(c);\n    return d && d.length ? d : b.parent();\n  }\n\n  function c(c) {\n    c && 3 === c.which || (a(e).remove(), a(f).each(function () {\n      var d = a(this),\n          e = b(d),\n          f = {\n        relatedTarget: this\n      };\n      e.hasClass(\"open\") && (c && \"click\" == c.type && /input|textarea/i.test(c.target.tagName) && a.contains(e[0], c.target) || (e.trigger(c = a.Event(\"hide.bs.dropdown\", f)), c.isDefaultPrevented() || (d.attr(\"aria-expanded\", \"false\"), e.removeClass(\"open\").trigger(\"hidden.bs.dropdown\", f))));\n    }));\n  }\n\n  function d(b) {\n    return this.each(function () {\n      var c = a(this),\n          d = c.data(\"bs.dropdown\");\n      d || c.data(\"bs.dropdown\", d = new g(this)), \"string\" == typeof b && d[b].call(c);\n    });\n  }\n\n  var e = \".dropdown-backdrop\",\n      f = '[data-toggle=\"dropdown\"]',\n      g = function g(b) {\n    a(b).on(\"click.bs.dropdown\", this.toggle);\n  };\n\n  g.VERSION = \"3.3.5\", g.prototype.toggle = function (d) {\n    var e = a(this);\n\n    if (!e.is(\".disabled, :disabled\")) {\n      var f = b(e),\n          g = f.hasClass(\"open\");\n\n      if (c(), !g) {\n        \"ontouchstart\" in document.documentElement && !f.closest(\".navbar-nav\").length && a(document.createElement(\"div\")).addClass(\"dropdown-backdrop\").insertAfter(a(this)).on(\"click\", c);\n        var h = {\n          relatedTarget: this\n        };\n        if (f.trigger(d = a.Event(\"show.bs.dropdown\", h)), d.isDefaultPrevented()) return;\n        e.trigger(\"focus\").attr(\"aria-expanded\", \"true\"), f.toggleClass(\"open\").trigger(\"shown.bs.dropdown\", h);\n      }\n\n      return !1;\n    }\n  }, g.prototype.keydown = function (c) {\n    if (/(38|40|27|32)/.test(c.which) && !/input|textarea/i.test(c.target.tagName)) {\n      var d = a(this);\n\n      if (c.preventDefault(), c.stopPropagation(), !d.is(\".disabled, :disabled\")) {\n        var e = b(d),\n            g = e.hasClass(\"open\");\n        if (!g && 27 != c.which || g && 27 == c.which) return 27 == c.which && e.find(f).trigger(\"focus\"), d.trigger(\"click\");\n        var h = \" li:not(.disabled):visible a\",\n            i = e.find(\".dropdown-menu\" + h);\n\n        if (i.length) {\n          var j = i.index(c.target);\n          38 == c.which && j > 0 && j--, 40 == c.which && j < i.length - 1 && j++, ~j || (j = 0), i.eq(j).trigger(\"focus\");\n        }\n      }\n    }\n  };\n  var h = a.fn.dropdown;\n  a.fn.dropdown = d, a.fn.dropdown.Constructor = g, a.fn.dropdown.noConflict = function () {\n    return a.fn.dropdown = h, this;\n  }, a(document).on(\"click.bs.dropdown.data-api\", c).on(\"click.bs.dropdown.data-api\", \".dropdown form\", function (a) {\n    a.stopPropagation();\n  }).on(\"click.bs.dropdown.data-api\", f, g.prototype.toggle).on(\"keydown.bs.dropdown.data-api\", f, g.prototype.keydown).on(\"keydown.bs.dropdown.data-api\", \".dropdown-menu\", g.prototype.keydown);\n}(jQuery), +function (a) {\n  \"use strict\";\n\n  function b(b, d) {\n    return this.each(function () {\n      var e = a(this),\n          f = e.data(\"bs.modal\"),\n          g = a.extend({}, c.DEFAULTS, e.data(), \"object\" == _typeof(b) && b);\n      f || e.data(\"bs.modal\", f = new c(this, g)), \"string\" == typeof b ? f[b](d) : g.show && f.show(d);\n    });\n  }\n\n  var c = function c(b, _c2) {\n    this.options = _c2, this.$body = a(document.body), this.$element = a(b), this.$dialog = this.$element.find(\".modal-dialog\"), this.$backdrop = null, this.isShown = null, this.originalBodyPad = null, this.scrollbarWidth = 0, this.ignoreBackdropClick = !1, this.options.remote && this.$element.find(\".modal-content\").load(this.options.remote, a.proxy(function () {\n      this.$element.trigger(\"loaded.bs.modal\");\n    }, this));\n  };\n\n  c.VERSION = \"3.3.5\", c.TRANSITION_DURATION = 300, c.BACKDROP_TRANSITION_DURATION = 150, c.DEFAULTS = {\n    backdrop: !0,\n    keyboard: !0,\n    show: !0\n  }, c.prototype.toggle = function (a) {\n    return this.isShown ? this.hide() : this.show(a);\n  }, c.prototype.show = function (b) {\n    var d = this,\n        e = a.Event(\"show.bs.modal\", {\n      relatedTarget: b\n    });\n    this.$element.trigger(e), this.isShown || e.isDefaultPrevented() || (this.isShown = !0, this.checkScrollbar(), this.setScrollbar(), this.$body.addClass(\"modal-open\"), this.escape(), this.resize(), this.$element.on(\"click.dismiss.bs.modal\", '[data-dismiss=\"modal\"]', a.proxy(this.hide, this)), this.$dialog.on(\"mousedown.dismiss.bs.modal\", function () {\n      d.$element.one(\"mouseup.dismiss.bs.modal\", function (b) {\n        a(b.target).is(d.$element) && (d.ignoreBackdropClick = !0);\n      });\n    }), this.backdrop(function () {\n      var e = a.support.transition && d.$element.hasClass(\"fade\");\n      d.$element.parent().length || d.$element.appendTo(d.$body), d.$element.show().scrollTop(0), d.adjustDialog(), e && d.$element[0].offsetWidth, d.$element.addClass(\"in\"), d.enforceFocus();\n      var f = a.Event(\"shown.bs.modal\", {\n        relatedTarget: b\n      });\n      e ? d.$dialog.one(\"bsTransitionEnd\", function () {\n        d.$element.trigger(\"focus\").trigger(f);\n      }).emulateTransitionEnd(c.TRANSITION_DURATION) : d.$element.trigger(\"focus\").trigger(f);\n    }));\n  }, c.prototype.hide = function (b) {\n    b && b.preventDefault(), b = a.Event(\"hide.bs.modal\"), this.$element.trigger(b), this.isShown && !b.isDefaultPrevented() && (this.isShown = !1, this.escape(), this.resize(), a(document).off(\"focusin.bs.modal\"), this.$element.removeClass(\"in\").off(\"click.dismiss.bs.modal\").off(\"mouseup.dismiss.bs.modal\"), this.$dialog.off(\"mousedown.dismiss.bs.modal\"), a.support.transition && this.$element.hasClass(\"fade\") ? this.$element.one(\"bsTransitionEnd\", a.proxy(this.hideModal, this)).emulateTransitionEnd(c.TRANSITION_DURATION) : this.hideModal());\n  }, c.prototype.enforceFocus = function () {\n    a(document).off(\"focusin.bs.modal\").on(\"focusin.bs.modal\", a.proxy(function (a) {\n      this.$element[0] === a.target || this.$element.has(a.target).length || this.$element.trigger(\"focus\");\n    }, this));\n  }, c.prototype.escape = function () {\n    this.isShown && this.options.keyboard ? this.$element.on(\"keydown.dismiss.bs.modal\", a.proxy(function (a) {\n      27 == a.which && this.hide();\n    }, this)) : this.isShown || this.$element.off(\"keydown.dismiss.bs.modal\");\n  }, c.prototype.resize = function () {\n    this.isShown ? a(window).on(\"resize.bs.modal\", a.proxy(this.handleUpdate, this)) : a(window).off(\"resize.bs.modal\");\n  }, c.prototype.hideModal = function () {\n    var a = this;\n    this.$element.hide(), this.backdrop(function () {\n      a.$body.removeClass(\"modal-open\"), a.resetAdjustments(), a.resetScrollbar(), a.$element.trigger(\"hidden.bs.modal\");\n    });\n  }, c.prototype.removeBackdrop = function () {\n    this.$backdrop && this.$backdrop.remove(), this.$backdrop = null;\n  }, c.prototype.backdrop = function (b) {\n    var d = this,\n        e = this.$element.hasClass(\"fade\") ? \"fade\" : \"\";\n\n    if (this.isShown && this.options.backdrop) {\n      var f = a.support.transition && e;\n      if (this.$backdrop = a(document.createElement(\"div\")).addClass(\"modal-backdrop \" + e).appendTo(this.$body), this.$element.on(\"click.dismiss.bs.modal\", a.proxy(function (a) {\n        return this.ignoreBackdropClick ? void (this.ignoreBackdropClick = !1) : void (a.target === a.currentTarget && (\"static\" == this.options.backdrop ? this.$element[0].focus() : this.hide()));\n      }, this)), f && this.$backdrop[0].offsetWidth, this.$backdrop.addClass(\"in\"), !b) return;\n      f ? this.$backdrop.one(\"bsTransitionEnd\", b).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION) : b();\n    } else if (!this.isShown && this.$backdrop) {\n      this.$backdrop.removeClass(\"in\");\n\n      var g = function g() {\n        d.removeBackdrop(), b && b();\n      };\n\n      a.support.transition && this.$element.hasClass(\"fade\") ? this.$backdrop.one(\"bsTransitionEnd\", g).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION) : g();\n    } else b && b();\n  }, c.prototype.handleUpdate = function () {\n    this.adjustDialog();\n  }, c.prototype.adjustDialog = function () {\n    var a = this.$element[0].scrollHeight > document.documentElement.clientHeight;\n    this.$element.css({\n      paddingLeft: !this.bodyIsOverflowing && a ? this.scrollbarWidth : \"\",\n      paddingRight: this.bodyIsOverflowing && !a ? this.scrollbarWidth : \"\"\n    });\n  }, c.prototype.resetAdjustments = function () {\n    this.$element.css({\n      paddingLeft: \"\",\n      paddingRight: \"\"\n    });\n  }, c.prototype.checkScrollbar = function () {\n    var a = window.innerWidth;\n\n    if (!a) {\n      var b = document.documentElement.getBoundingClientRect();\n      a = b.right - Math.abs(b.left);\n    }\n\n    this.bodyIsOverflowing = document.body.clientWidth < a, this.scrollbarWidth = this.measureScrollbar();\n  }, c.prototype.setScrollbar = function () {\n    var a = parseInt(this.$body.css(\"padding-right\") || 0, 10);\n    this.originalBodyPad = document.body.style.paddingRight || \"\", this.bodyIsOverflowing && this.$body.css(\"padding-right\", a + this.scrollbarWidth);\n  }, c.prototype.resetScrollbar = function () {\n    this.$body.css(\"padding-right\", this.originalBodyPad);\n  }, c.prototype.measureScrollbar = function () {\n    var a = document.createElement(\"div\");\n    a.className = \"modal-scrollbar-measure\", this.$body.append(a);\n    var b = a.offsetWidth - a.clientWidth;\n    return this.$body[0].removeChild(a), b;\n  };\n  var d = a.fn.modal;\n  a.fn.modal = b, a.fn.modal.Constructor = c, a.fn.modal.noConflict = function () {\n    return a.fn.modal = d, this;\n  }, a(document).on(\"click.bs.modal.data-api\", '[data-toggle=\"modal\"]', function (c) {\n    var d = a(this),\n        e = d.attr(\"href\"),\n        f = a(d.attr(\"data-target\") || e && e.replace(/.*(?=#[^\\s]+$)/, \"\")),\n        g = f.data(\"bs.modal\") ? \"toggle\" : a.extend({\n      remote: !/#/.test(e) && e\n    }, f.data(), d.data());\n    d.is(\"a\") && c.preventDefault(), f.one(\"show.bs.modal\", function (a) {\n      a.isDefaultPrevented() || f.one(\"hidden.bs.modal\", function () {\n        d.is(\":visible\") && d.trigger(\"focus\");\n      });\n    }), b.call(f, g, this);\n  });\n}(jQuery), +function (a) {\n  \"use strict\";\n\n  function b(b) {\n    return this.each(function () {\n      var d = a(this),\n          e = d.data(\"bs.tooltip\"),\n          f = \"object\" == _typeof(b) && b;\n      (e || !/destroy|hide/.test(b)) && (e || d.data(\"bs.tooltip\", e = new c(this, f)), \"string\" == typeof b && e[b]());\n    });\n  }\n\n  var c = function c(a, b) {\n    this.type = null, this.options = null, this.enabled = null, this.timeout = null, this.hoverState = null, this.$element = null, this.inState = null, this.init(\"tooltip\", a, b);\n  };\n\n  c.VERSION = \"3.3.5\", c.TRANSITION_DURATION = 150, c.DEFAULTS = {\n    animation: !0,\n    placement: \"top\",\n    selector: !1,\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n    trigger: \"hover focus\",\n    title: \"\",\n    delay: 0,\n    html: !1,\n    container: !1,\n    viewport: {\n      selector: \"body\",\n      padding: 0\n    }\n  }, c.prototype.init = function (b, c, d) {\n    if (this.enabled = !0, this.type = b, this.$element = a(c), this.options = this.getOptions(d), this.$viewport = this.options.viewport && a(a.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport), this.inState = {\n      click: !1,\n      hover: !1,\n      focus: !1\n    }, this.$element[0] instanceof document.constructor && !this.options.selector) throw new Error(\"`selector` option must be specified when initializing \" + this.type + \" on the window.document object!\");\n\n    for (var e = this.options.trigger.split(\" \"), f = e.length; f--;) {\n      var g = e[f];\n      if (\"click\" == g) this.$element.on(\"click.\" + this.type, this.options.selector, a.proxy(this.toggle, this));else if (\"manual\" != g) {\n        var h = \"hover\" == g ? \"mouseenter\" : \"focusin\",\n            i = \"hover\" == g ? \"mouseleave\" : \"focusout\";\n        this.$element.on(h + \".\" + this.type, this.options.selector, a.proxy(this.enter, this)), this.$element.on(i + \".\" + this.type, this.options.selector, a.proxy(this.leave, this));\n      }\n    }\n\n    this.options.selector ? this._options = a.extend({}, this.options, {\n      trigger: \"manual\",\n      selector: \"\"\n    }) : this.fixTitle();\n  }, c.prototype.getDefaults = function () {\n    return c.DEFAULTS;\n  }, c.prototype.getOptions = function (b) {\n    return b = a.extend({}, this.getDefaults(), this.$element.data(), b), b.delay && \"number\" == typeof b.delay && (b.delay = {\n      show: b.delay,\n      hide: b.delay\n    }), b;\n  }, c.prototype.getDelegateOptions = function () {\n    var b = {},\n        c = this.getDefaults();\n    return this._options && a.each(this._options, function (a, d) {\n      c[a] != d && (b[a] = d);\n    }), b;\n  }, c.prototype.enter = function (b) {\n    var c = b instanceof this.constructor ? b : a(b.currentTarget).data(\"bs.\" + this.type);\n    return c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data(\"bs.\" + this.type, c)), b instanceof a.Event && (c.inState[\"focusin\" == b.type ? \"focus\" : \"hover\"] = !0), c.tip().hasClass(\"in\") || \"in\" == c.hoverState ? void (c.hoverState = \"in\") : (clearTimeout(c.timeout), c.hoverState = \"in\", c.options.delay && c.options.delay.show ? void (c.timeout = setTimeout(function () {\n      \"in\" == c.hoverState && c.show();\n    }, c.options.delay.show)) : c.show());\n  }, c.prototype.isInStateTrue = function () {\n    for (var a in this.inState) {\n      if (this.inState[a]) return !0;\n    }\n\n    return !1;\n  }, c.prototype.leave = function (b) {\n    var c = b instanceof this.constructor ? b : a(b.currentTarget).data(\"bs.\" + this.type);\n    return c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data(\"bs.\" + this.type, c)), b instanceof a.Event && (c.inState[\"focusout\" == b.type ? \"focus\" : \"hover\"] = !1), c.isInStateTrue() ? void 0 : (clearTimeout(c.timeout), c.hoverState = \"out\", c.options.delay && c.options.delay.hide ? void (c.timeout = setTimeout(function () {\n      \"out\" == c.hoverState && c.hide();\n    }, c.options.delay.hide)) : c.hide());\n  }, c.prototype.show = function () {\n    var b = a.Event(\"show.bs.\" + this.type);\n\n    if (this.hasContent() && this.enabled) {\n      this.$element.trigger(b);\n      var d = a.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);\n      if (b.isDefaultPrevented() || !d) return;\n      var e = this,\n          f = this.tip(),\n          g = this.getUID(this.type);\n      this.setContent(), f.attr(\"id\", g), this.$element.attr(\"aria-describedby\", g), this.options.animation && f.addClass(\"fade\");\n      var h = \"function\" == typeof this.options.placement ? this.options.placement.call(this, f[0], this.$element[0]) : this.options.placement,\n          i = /\\s?auto?\\s?/i,\n          j = i.test(h);\n      j && (h = h.replace(i, \"\") || \"top\"), f.detach().css({\n        top: 0,\n        left: 0,\n        display: \"block\"\n      }).addClass(h).data(\"bs.\" + this.type, this), this.options.container ? f.appendTo(this.options.container) : f.insertAfter(this.$element), this.$element.trigger(\"inserted.bs.\" + this.type);\n      var k = this.getPosition(),\n          l = f[0].offsetWidth,\n          m = f[0].offsetHeight;\n\n      if (j) {\n        var n = h,\n            o = this.getPosition(this.$viewport);\n        h = \"bottom\" == h && k.bottom + m > o.bottom ? \"top\" : \"top\" == h && k.top - m < o.top ? \"bottom\" : \"right\" == h && k.right + l > o.width ? \"left\" : \"left\" == h && k.left - l < o.left ? \"right\" : h, f.removeClass(n).addClass(h);\n      }\n\n      var p = this.getCalculatedOffset(h, k, l, m);\n      this.applyPlacement(p, h);\n\n      var q = function q() {\n        var a = e.hoverState;\n        e.$element.trigger(\"shown.bs.\" + e.type), e.hoverState = null, \"out\" == a && e.leave(e);\n      };\n\n      a.support.transition && this.$tip.hasClass(\"fade\") ? f.one(\"bsTransitionEnd\", q).emulateTransitionEnd(c.TRANSITION_DURATION) : q();\n    }\n  }, c.prototype.applyPlacement = function (b, c) {\n    var d = this.tip(),\n        e = d[0].offsetWidth,\n        f = d[0].offsetHeight,\n        g = parseInt(d.css(\"margin-top\"), 10),\n        h = parseInt(d.css(\"margin-left\"), 10);\n    isNaN(g) && (g = 0), isNaN(h) && (h = 0), b.top += g, b.left += h, a.offset.setOffset(d[0], a.extend({\n      using: function using(a) {\n        d.css({\n          top: Math.round(a.top),\n          left: Math.round(a.left)\n        });\n      }\n    }, b), 0), d.addClass(\"in\");\n    var i = d[0].offsetWidth,\n        j = d[0].offsetHeight;\n    \"top\" == c && j != f && (b.top = b.top + f - j);\n    var k = this.getViewportAdjustedDelta(c, b, i, j);\n    k.left ? b.left += k.left : b.top += k.top;\n    var l = /top|bottom/.test(c),\n        m = l ? 2 * k.left - e + i : 2 * k.top - f + j,\n        n = l ? \"offsetWidth\" : \"offsetHeight\";\n    d.offset(b), this.replaceArrow(m, d[0][n], l);\n  }, c.prototype.replaceArrow = function (a, b, c) {\n    this.arrow().css(c ? \"left\" : \"top\", 50 * (1 - a / b) + \"%\").css(c ? \"top\" : \"left\", \"\");\n  }, c.prototype.setContent = function () {\n    var a = this.tip(),\n        b = this.getTitle();\n    a.find(\".tooltip-inner\")[this.options.html ? \"html\" : \"text\"](b), a.removeClass(\"fade in top bottom left right\");\n  }, c.prototype.hide = function (b) {\n    function d() {\n      \"in\" != e.hoverState && f.detach(), e.$element.removeAttr(\"aria-describedby\").trigger(\"hidden.bs.\" + e.type), b && b();\n    }\n\n    var e = this,\n        f = a(this.$tip),\n        g = a.Event(\"hide.bs.\" + this.type);\n    return this.$element.trigger(g), g.isDefaultPrevented() ? void 0 : (f.removeClass(\"in\"), a.support.transition && f.hasClass(\"fade\") ? f.one(\"bsTransitionEnd\", d).emulateTransitionEnd(c.TRANSITION_DURATION) : d(), this.hoverState = null, this);\n  }, c.prototype.fixTitle = function () {\n    var a = this.$element;\n    (a.attr(\"title\") || \"string\" != typeof a.attr(\"data-original-title\")) && a.attr(\"data-original-title\", a.attr(\"title\") || \"\").attr(\"title\", \"\");\n  }, c.prototype.hasContent = function () {\n    return this.getTitle();\n  }, c.prototype.getPosition = function (b) {\n    b = b || this.$element;\n    var c = b[0],\n        d = \"BODY\" == c.tagName,\n        e = c.getBoundingClientRect();\n    null == e.width && (e = a.extend({}, e, {\n      width: e.right - e.left,\n      height: e.bottom - e.top\n    }));\n    var f = d ? {\n      top: 0,\n      left: 0\n    } : b.offset(),\n        g = {\n      scroll: d ? document.documentElement.scrollTop || document.body.scrollTop : b.scrollTop()\n    },\n        h = d ? {\n      width: a(window).width(),\n      height: a(window).height()\n    } : null;\n    return a.extend({}, e, g, h, f);\n  }, c.prototype.getCalculatedOffset = function (a, b, c, d) {\n    return \"bottom\" == a ? {\n      top: b.top + b.height,\n      left: b.left + b.width / 2 - c / 2\n    } : \"top\" == a ? {\n      top: b.top - d,\n      left: b.left + b.width / 2 - c / 2\n    } : \"left\" == a ? {\n      top: b.top + b.height / 2 - d / 2,\n      left: b.left - c\n    } : {\n      top: b.top + b.height / 2 - d / 2,\n      left: b.left + b.width\n    };\n  }, c.prototype.getViewportAdjustedDelta = function (a, b, c, d) {\n    var e = {\n      top: 0,\n      left: 0\n    };\n    if (!this.$viewport) return e;\n    var f = this.options.viewport && this.options.viewport.padding || 0,\n        g = this.getPosition(this.$viewport);\n\n    if (/right|left/.test(a)) {\n      var h = b.top - f - g.scroll,\n          i = b.top + f - g.scroll + d;\n      h < g.top ? e.top = g.top - h : i > g.top + g.height && (e.top = g.top + g.height - i);\n    } else {\n      var j = b.left - f,\n          k = b.left + f + c;\n      j < g.left ? e.left = g.left - j : k > g.right && (e.left = g.left + g.width - k);\n    }\n\n    return e;\n  }, c.prototype.getTitle = function () {\n    var a,\n        b = this.$element,\n        c = this.options;\n    return a = b.attr(\"data-original-title\") || (\"function\" == typeof c.title ? c.title.call(b[0]) : c.title);\n  }, c.prototype.getUID = function (a) {\n    do {\n      a += ~~(1e6 * Math.random());\n    } while (document.getElementById(a));\n\n    return a;\n  }, c.prototype.tip = function () {\n    if (!this.$tip && (this.$tip = a(this.options.template), 1 != this.$tip.length)) throw new Error(this.type + \" `template` option must consist of exactly 1 top-level element!\");\n    return this.$tip;\n  }, c.prototype.arrow = function () {\n    return this.$arrow = this.$arrow || this.tip().find(\".tooltip-arrow\");\n  }, c.prototype.enable = function () {\n    this.enabled = !0;\n  }, c.prototype.disable = function () {\n    this.enabled = !1;\n  }, c.prototype.toggleEnabled = function () {\n    this.enabled = !this.enabled;\n  }, c.prototype.toggle = function (b) {\n    var c = this;\n    b && (c = a(b.currentTarget).data(\"bs.\" + this.type), c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data(\"bs.\" + this.type, c))), b ? (c.inState.click = !c.inState.click, c.isInStateTrue() ? c.enter(c) : c.leave(c)) : c.tip().hasClass(\"in\") ? c.leave(c) : c.enter(c);\n  }, c.prototype.destroy = function () {\n    var a = this;\n    clearTimeout(this.timeout), this.hide(function () {\n      a.$element.off(\".\" + a.type).removeData(\"bs.\" + a.type), a.$tip && a.$tip.detach(), a.$tip = null, a.$arrow = null, a.$viewport = null;\n    });\n  };\n  var d = a.fn.tooltip;\n  a.fn.tooltip = b, a.fn.tooltip.Constructor = c, a.fn.tooltip.noConflict = function () {\n    return a.fn.tooltip = d, this;\n  };\n}(jQuery), +function (a) {\n  \"use strict\";\n\n  function b(b) {\n    return this.each(function () {\n      var d = a(this),\n          e = d.data(\"bs.popover\"),\n          f = \"object\" == _typeof(b) && b;\n      (e || !/destroy|hide/.test(b)) && (e || d.data(\"bs.popover\", e = new c(this, f)), \"string\" == typeof b && e[b]());\n    });\n  }\n\n  var c = function c(a, b) {\n    this.init(\"popover\", a, b);\n  };\n\n  if (!a.fn.tooltip) throw new Error(\"Popover requires tooltip.js\");\n  c.VERSION = \"3.3.5\", c.DEFAULTS = a.extend({}, a.fn.tooltip.Constructor.DEFAULTS, {\n    placement: \"right\",\n    trigger: \"click\",\n    content: \"\",\n    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>'\n  }), c.prototype = a.extend({}, a.fn.tooltip.Constructor.prototype), c.prototype.constructor = c, c.prototype.getDefaults = function () {\n    return c.DEFAULTS;\n  }, c.prototype.setContent = function () {\n    var a = this.tip(),\n        b = this.getTitle(),\n        c = this.getContent();\n    a.find(\".popover-title\")[this.options.html ? \"html\" : \"text\"](b), a.find(\".popover-content\").children().detach().end()[this.options.html ? \"string\" == typeof c ? \"html\" : \"append\" : \"text\"](c), a.removeClass(\"fade top bottom left right in\"), a.find(\".popover-title\").html() || a.find(\".popover-title\").hide();\n  }, c.prototype.hasContent = function () {\n    return this.getTitle() || this.getContent();\n  }, c.prototype.getContent = function () {\n    var a = this.$element,\n        b = this.options;\n    return a.attr(\"data-content\") || (\"function\" == typeof b.content ? b.content.call(a[0]) : b.content);\n  }, c.prototype.arrow = function () {\n    return this.$arrow = this.$arrow || this.tip().find(\".arrow\");\n  };\n  var d = a.fn.popover;\n  a.fn.popover = b, a.fn.popover.Constructor = c, a.fn.popover.noConflict = function () {\n    return a.fn.popover = d, this;\n  };\n}(jQuery), +function (a) {\n  \"use strict\";\n\n  function b(c, d) {\n    this.$body = a(document.body), this.$scrollElement = a(a(c).is(document.body) ? window : c), this.options = a.extend({}, b.DEFAULTS, d), this.selector = (this.options.target || \"\") + \" .nav li > a\", this.offsets = [], this.targets = [], this.activeTarget = null, this.scrollHeight = 0, this.$scrollElement.on(\"scroll.bs.scrollspy\", a.proxy(this.process, this)), this.refresh(), this.process();\n  }\n\n  function c(c) {\n    return this.each(function () {\n      var d = a(this),\n          e = d.data(\"bs.scrollspy\"),\n          f = \"object\" == _typeof(c) && c;\n      e || d.data(\"bs.scrollspy\", e = new b(this, f)), \"string\" == typeof c && e[c]();\n    });\n  }\n\n  b.VERSION = \"3.3.5\", b.DEFAULTS = {\n    offset: 10\n  }, b.prototype.getScrollHeight = function () {\n    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);\n  }, b.prototype.refresh = function () {\n    var b = this,\n        c = \"offset\",\n        d = 0;\n    this.offsets = [], this.targets = [], this.scrollHeight = this.getScrollHeight(), a.isWindow(this.$scrollElement[0]) || (c = \"position\", d = this.$scrollElement.scrollTop()), this.$body.find(this.selector).map(function () {\n      var b = a(this),\n          e = b.data(\"target\") || b.attr(\"href\"),\n          f = /^#./.test(e) && a(e);\n      return f && f.length && f.is(\":visible\") && [[f[c]().top + d, e]] || null;\n    }).sort(function (a, b) {\n      return a[0] - b[0];\n    }).each(function () {\n      b.offsets.push(this[0]), b.targets.push(this[1]);\n    });\n  }, b.prototype.process = function () {\n    var a,\n        b = this.$scrollElement.scrollTop() + this.options.offset,\n        c = this.getScrollHeight(),\n        d = this.options.offset + c - this.$scrollElement.height(),\n        e = this.offsets,\n        f = this.targets,\n        g = this.activeTarget;\n    if (this.scrollHeight != c && this.refresh(), b >= d) return g != (a = f[f.length - 1]) && this.activate(a);\n    if (g && b < e[0]) return this.activeTarget = null, this.clear();\n\n    for (a = e.length; a--;) {\n      g != f[a] && b >= e[a] && (void 0 === e[a + 1] || b < e[a + 1]) && this.activate(f[a]);\n    }\n  }, b.prototype.activate = function (b) {\n    this.activeTarget = b, this.clear();\n    var c = this.selector + '[data-target=\"' + b + '\"],' + this.selector + '[href=\"' + b + '\"]',\n        d = a(c).parents(\"li\").addClass(\"active\");\n    d.parent(\".dropdown-menu\").length && (d = d.closest(\"li.dropdown\").addClass(\"active\")), d.trigger(\"activate.bs.scrollspy\");\n  }, b.prototype.clear = function () {\n    a(this.selector).parentsUntil(this.options.target, \".active\").removeClass(\"active\");\n  };\n  var d = a.fn.scrollspy;\n  a.fn.scrollspy = c, a.fn.scrollspy.Constructor = b, a.fn.scrollspy.noConflict = function () {\n    return a.fn.scrollspy = d, this;\n  }, a(window).on(\"load.bs.scrollspy.data-api\", function () {\n    a('[data-spy=\"scroll\"]').each(function () {\n      var b = a(this);\n      c.call(b, b.data());\n    });\n  });\n}(jQuery), +function (a) {\n  \"use strict\";\n\n  function b(b) {\n    return this.each(function () {\n      var d = a(this),\n          e = d.data(\"bs.tab\");\n      e || d.data(\"bs.tab\", e = new c(this)), \"string\" == typeof b && e[b]();\n    });\n  }\n\n  var c = function c(b) {\n    this.element = a(b);\n  };\n\n  c.VERSION = \"3.3.5\", c.TRANSITION_DURATION = 150, c.prototype.show = function () {\n    var b = this.element,\n        c = b.closest(\"ul:not(.dropdown-menu)\"),\n        d = b.data(\"target\");\n\n    if (d || (d = b.attr(\"href\"), d = d && d.replace(/.*(?=#[^\\s]*$)/, \"\")), !b.parent(\"li\").hasClass(\"active\")) {\n      var e = c.find(\".active:last a\"),\n          f = a.Event(\"hide.bs.tab\", {\n        relatedTarget: b[0]\n      }),\n          g = a.Event(\"show.bs.tab\", {\n        relatedTarget: e[0]\n      });\n\n      if (e.trigger(f), b.trigger(g), !g.isDefaultPrevented() && !f.isDefaultPrevented()) {\n        var h = a(d);\n        this.activate(b.closest(\"li\"), c), this.activate(h, h.parent(), function () {\n          e.trigger({\n            type: \"hidden.bs.tab\",\n            relatedTarget: b[0]\n          }), b.trigger({\n            type: \"shown.bs.tab\",\n            relatedTarget: e[0]\n          });\n        });\n      }\n    }\n  }, c.prototype.activate = function (b, d, e) {\n    function f() {\n      g.removeClass(\"active\").find(\"> .dropdown-menu > .active\").removeClass(\"active\").end().find('[data-toggle=\"tab\"]').attr(\"aria-expanded\", !1), b.addClass(\"active\").find('[data-toggle=\"tab\"]').attr(\"aria-expanded\", !0), h ? (b[0].offsetWidth, b.addClass(\"in\")) : b.removeClass(\"fade\"), b.parent(\".dropdown-menu\").length && b.closest(\"li.dropdown\").addClass(\"active\").end().find('[data-toggle=\"tab\"]').attr(\"aria-expanded\", !0), e && e();\n    }\n\n    var g = d.find(\"> .active\"),\n        h = e && a.support.transition && (g.length && g.hasClass(\"fade\") || !!d.find(\"> .fade\").length);\n    g.length && h ? g.one(\"bsTransitionEnd\", f).emulateTransitionEnd(c.TRANSITION_DURATION) : f(), g.removeClass(\"in\");\n  };\n  var d = a.fn.tab;\n  a.fn.tab = b, a.fn.tab.Constructor = c, a.fn.tab.noConflict = function () {\n    return a.fn.tab = d, this;\n  };\n\n  var e = function e(c) {\n    c.preventDefault(), b.call(a(this), \"show\");\n  };\n\n  a(document).on(\"click.bs.tab.data-api\", '[data-toggle=\"tab\"]', e).on(\"click.bs.tab.data-api\", '[data-toggle=\"pill\"]', e);\n}(jQuery), +function (a) {\n  \"use strict\";\n\n  function b(b) {\n    return this.each(function () {\n      var d = a(this),\n          e = d.data(\"bs.affix\"),\n          f = \"object\" == _typeof(b) && b;\n      e || d.data(\"bs.affix\", e = new c(this, f)), \"string\" == typeof b && e[b]();\n    });\n  }\n\n  var c = function c(b, d) {\n    this.options = a.extend({}, c.DEFAULTS, d), this.$target = a(this.options.target).on(\"scroll.bs.affix.data-api\", a.proxy(this.checkPosition, this)).on(\"click.bs.affix.data-api\", a.proxy(this.checkPositionWithEventLoop, this)), this.$element = a(b), this.affixed = null, this.unpin = null, this.pinnedOffset = null, this.checkPosition();\n  };\n\n  c.VERSION = \"3.3.5\", c.RESET = \"affix affix-top affix-bottom\", c.DEFAULTS = {\n    offset: 0,\n    target: window\n  }, c.prototype.getState = function (a, b, c, d) {\n    var e = this.$target.scrollTop(),\n        f = this.$element.offset(),\n        g = this.$target.height();\n    if (null != c && \"top\" == this.affixed) return c > e ? \"top\" : !1;\n    if (\"bottom\" == this.affixed) return null != c ? e + this.unpin <= f.top ? !1 : \"bottom\" : a - d >= e + g ? !1 : \"bottom\";\n    var h = null == this.affixed,\n        i = h ? e : f.top,\n        j = h ? g : b;\n    return null != c && c >= e ? \"top\" : null != d && i + j >= a - d ? \"bottom\" : !1;\n  }, c.prototype.getPinnedOffset = function () {\n    if (this.pinnedOffset) return this.pinnedOffset;\n    this.$element.removeClass(c.RESET).addClass(\"affix\");\n    var a = this.$target.scrollTop(),\n        b = this.$element.offset();\n    return this.pinnedOffset = b.top - a;\n  }, c.prototype.checkPositionWithEventLoop = function () {\n    setTimeout(a.proxy(this.checkPosition, this), 1);\n  }, c.prototype.checkPosition = function () {\n    if (this.$element.is(\":visible\")) {\n      var b = this.$element.height(),\n          d = this.options.offset,\n          e = d.top,\n          f = d.bottom,\n          g = Math.max(a(document).height(), a(document.body).height());\n      \"object\" != _typeof(d) && (f = e = d), \"function\" == typeof e && (e = d.top(this.$element)), \"function\" == typeof f && (f = d.bottom(this.$element));\n      var h = this.getState(g, b, e, f);\n\n      if (this.affixed != h) {\n        null != this.unpin && this.$element.css(\"top\", \"\");\n        var i = \"affix\" + (h ? \"-\" + h : \"\"),\n            j = a.Event(i + \".bs.affix\");\n        if (this.$element.trigger(j), j.isDefaultPrevented()) return;\n        this.affixed = h, this.unpin = \"bottom\" == h ? this.getPinnedOffset() : null, this.$element.removeClass(c.RESET).addClass(i).trigger(i.replace(\"affix\", \"affixed\") + \".bs.affix\");\n      }\n\n      \"bottom\" == h && this.$element.offset({\n        top: g - b - f\n      });\n    }\n  };\n  var d = a.fn.affix;\n  a.fn.affix = b, a.fn.affix.Constructor = c, a.fn.affix.noConflict = function () {\n    return a.fn.affix = d, this;\n  }, a(window).on(\"load\", function () {\n    a('[data-spy=\"affix\"]').each(function () {\n      var c = a(this),\n          d = c.data();\n      d.offset = d.offset || {}, null != d.offsetBottom && (d.offset.bottom = d.offsetBottom), null != d.offsetTop && (d.offset.top = d.offsetTop), b.call(c, d);\n    });\n  });\n}(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/front/js/bootstrap.min.js\n");

            /***/
        }),

        /***/ "./resources/assets/front/js/jquery.bxslider.js":
        /*!******************************************************!*\
          !*** ./resources/assets/front/js/jquery.bxslider.js ***!
          \******************************************************/
        /***/ (() => {

            eval("/**\n * BxSlider v4.1.2 - Fully loaded, responsive content slider\n * http://bxslider.com\n *\n * Copyright 2014, Steven Wanderski - http://stevenwanderski.com - http://bxcreative.com\n * Written while drinking Belgian ales and listening to jazz\n *\n * Released under the MIT license - http://opensource.org/licenses/MIT\n */\n;\n\n(function ($) {\n  var plugin = {};\n  var defaults = {\n    // GENERAL\n    mode: 'horizontal',\n    slideSelector: '',\n    infiniteLoop: true,\n    hideControlOnEnd: false,\n    speed: 500,\n    easing: null,\n    slideMargin: 0,\n    startSlide: 0,\n    randomStart: false,\n    captions: false,\n    ticker: false,\n    tickerHover: false,\n    adaptiveHeight: false,\n    adaptiveHeightSpeed: 500,\n    video: false,\n    useCSS: true,\n    preloadImages: 'visible',\n    responsive: true,\n    slideZIndex: 50,\n    wrapperClass: 'bx-wrapper',\n    // TOUCH\n    touchEnabled: true,\n    swipeThreshold: 50,\n    oneToOneTouch: true,\n    preventDefaultSwipeX: true,\n    preventDefaultSwipeY: false,\n    // PAGER\n    pager: true,\n    pagerType: 'full',\n    pagerShortSeparator: ' / ',\n    pagerSelector: null,\n    buildPager: null,\n    pagerCustom: null,\n    // CONTROLS\n    controls: true,\n    nextText: 'Next',\n    prevText: 'Prev',\n    nextSelector: null,\n    prevSelector: null,\n    autoControls: false,\n    startText: 'Start',\n    stopText: 'Stop',\n    autoControlsCombine: false,\n    autoControlsSelector: null,\n    // AUTO\n    auto: false,\n    pause: 4000,\n    autoStart: true,\n    autoDirection: 'next',\n    autoHover: false,\n    autoDelay: 0,\n    autoSlideForOnePage: false,\n    // CAROUSEL\n    minSlides: 1,\n    maxSlides: 1,\n    moveSlides: 0,\n    slideWidth: 0,\n    // CALLBACKS\n    onSliderLoad: function onSliderLoad() {},\n    onSlideBefore: function onSlideBefore() {},\n    onSlideAfter: function onSlideAfter() {},\n    onSlideNext: function onSlideNext() {},\n    onSlidePrev: function onSlidePrev() {},\n    onSliderResize: function onSliderResize() {}\n  };\n\n  $.fn.bxSlider = function (options) {\n    if (this.length == 0) return this; // support mutltiple elements\n\n    if (this.length > 1) {\n      this.each(function () {\n        $(this).bxSlider(options);\n      });\n      return this;\n    } // create a namespace to be used throughout the plugin\n\n\n    var slider = {}; // set a reference to our slider element\n\n    var el = this;\n    plugin.el = this;\n    /**\n     * Makes slideshow responsive\n     */\n    // first get the original window dimens (thanks alot IE)\n\n    var windowWidth = $(window).width();\n    var windowHeight = $(window).height();\n    /**\n     * ===================================================================================\n     * = PRIVATE FUNCTIONS\n     * ===================================================================================\n     */\n\n    /**\n     * Initializes namespace settings to be used throughout plugin\n     */\n\n    var init = function init() {\n      // merge user-supplied options with the defaults\n      slider.settings = $.extend({}, defaults, options); // parse slideWidth setting\n\n      slider.settings.slideWidth = parseInt(slider.settings.slideWidth); // store the original children\n\n      slider.children = el.children(slider.settings.slideSelector); // check if actual number of slides is less than minSlides / maxSlides\n\n      if (slider.children.length < slider.settings.minSlides) slider.settings.minSlides = slider.children.length;\n      if (slider.children.length < slider.settings.maxSlides) slider.settings.maxSlides = slider.children.length; // if random start, set the startSlide setting to random number\n\n      if (slider.settings.randomStart) slider.settings.startSlide = Math.floor(Math.random() * slider.children.length); // store active slide information\n\n      slider.active = {\n        index: slider.settings.startSlide\n      }; // store if the slider is in carousel mode (displaying / moving multiple slides)\n\n      slider.carousel = slider.settings.minSlides > 1 || slider.settings.maxSlides > 1; // if carousel, force preloadImages = 'all'\n\n      if (slider.carousel) slider.settings.preloadImages = 'all'; // calculate the min / max width thresholds based on min / max number of slides\n      // used to setup and update carousel slides dimensions\n\n      slider.minThreshold = slider.settings.minSlides * slider.settings.slideWidth + (slider.settings.minSlides - 1) * slider.settings.slideMargin;\n      slider.maxThreshold = slider.settings.maxSlides * slider.settings.slideWidth + (slider.settings.maxSlides - 1) * slider.settings.slideMargin; // store the current state of the slider (if currently animating, working is true)\n\n      slider.working = false; // initialize the controls object\n\n      slider.controls = {}; // initialize an auto interval\n\n      slider.interval = null; // determine which property to use for transitions\n\n      slider.animProp = slider.settings.mode == 'vertical' ? 'top' : 'left'; // determine if hardware acceleration can be used\n\n      slider.usingCSS = slider.settings.useCSS && slider.settings.mode != 'fade' && function () {\n        // create our test div element\n        var div = document.createElement('div'); // css transition properties\n\n        var props = ['WebkitPerspective', 'MozPerspective', 'OPerspective', 'msPerspective']; // test for each property\n\n        for (var i in props) {\n          if (div.style[props[i]] !== undefined) {\n            slider.cssPrefix = props[i].replace('Perspective', '').toLowerCase();\n            slider.animProp = '-' + slider.cssPrefix + '-transform';\n            return true;\n          }\n        }\n\n        return false;\n      }(); // if vertical mode always make maxSlides and minSlides equal\n\n\n      if (slider.settings.mode == 'vertical') slider.settings.maxSlides = slider.settings.minSlides; // save original style data\n\n      el.data(\"origStyle\", el.attr(\"style\"));\n      el.children(slider.settings.slideSelector).each(function () {\n        $(this).data(\"origStyle\", $(this).attr(\"style\"));\n      }); // perform all DOM / CSS modifications\n\n      setup();\n    };\n    /**\n     * Performs all DOM and CSS modifications\n     */\n\n\n    var setup = function setup() {\n      // wrap el in a wrapper\n      el.wrap('<div class=\"' + slider.settings.wrapperClass + '\"><div class=\"bx-viewport\"></div></div>'); // store a namspace reference to .bx-viewport\n\n      slider.viewport = el.parent(); // add a loading div to display while images are loading\n\n      slider.loader = $('<div class=\"bx-loading\" />');\n      slider.viewport.prepend(slider.loader); // set el to a massive width, to hold any needed slides\n      // also strip any margin and padding from el\n\n      el.css({\n        width: slider.settings.mode == 'horizontal' ? slider.children.length * 100 + 215 + '%' : 'auto',\n        position: 'relative'\n      }); // if using CSS, add the easing property\n\n      if (slider.usingCSS && slider.settings.easing) {\n        el.css('-' + slider.cssPrefix + '-transition-timing-function', slider.settings.easing); // if not using CSS and no easing value was supplied, use the default JS animation easing (swing)\n      } else if (!slider.settings.easing) {\n        slider.settings.easing = 'swing';\n      }\n\n      var slidesShowing = getNumberSlidesShowing(); // make modifications to the viewport (.bx-viewport)\n\n      slider.viewport.css({\n        width: '100%',\n        overflow: 'hidden',\n        position: 'relative'\n      });\n      slider.viewport.parent().css({\n        maxWidth: getViewportMaxWidth()\n      }); // make modification to the wrapper (.bx-wrapper)\n\n      if (!slider.settings.pager) {\n        slider.viewport.parent().css({\n          margin: '0 auto 0px'\n        });\n      } // apply css to all slider children\n\n\n      slider.children.css({\n        'float': slider.settings.mode == 'horizontal' ? 'left' : 'none',\n        listStyle: 'none',\n        position: 'relative'\n      }); // apply the calculated width after the float is applied to prevent scrollbar interference\n\n      slider.children.css('width', getSlideWidth()); // if slideMargin is supplied, add the css\n\n      if (slider.settings.mode == 'horizontal' && slider.settings.slideMargin > 0) slider.children.css('marginRight', slider.settings.slideMargin);\n      if (slider.settings.mode == 'vertical' && slider.settings.slideMargin > 0) slider.children.css('marginBottom', slider.settings.slideMargin); // if \"fade\" mode, add positioning and z-index CSS\n\n      if (slider.settings.mode == 'fade') {\n        slider.children.css({\n          position: 'absolute',\n          zIndex: 0,\n          display: 'none'\n        }); // prepare the z-index on the showing element\n\n        slider.children.eq(slider.settings.startSlide).css({\n          zIndex: slider.settings.slideZIndex,\n          display: 'block'\n        });\n      } // create an element to contain all slider controls (pager, start / stop, etc)\n\n\n      slider.controls.el = $('<div class=\"bx-controls\" />'); // if captions are requested, add them\n\n      if (slider.settings.captions) appendCaptions(); // check if startSlide is last slide\n\n      slider.active.last = slider.settings.startSlide == getPagerQty() - 1; // if video is true, set up the fitVids plugin\n\n      if (slider.settings.video) el.fitVids(); // set the default preload selector (visible)\n\n      var preloadSelector = slider.children.eq(slider.settings.startSlide);\n      if (slider.settings.preloadImages == \"all\") preloadSelector = slider.children; // only check for control addition if not in \"ticker\" mode\n\n      if (!slider.settings.ticker) {\n        // if pager is requested, add it\n        if (slider.settings.pager) appendPager(); // if controls are requested, add them\n\n        if (slider.settings.controls) appendControls(); // if auto is true, and auto controls are requested, add them\n\n        if (slider.settings.auto && slider.settings.autoControls) appendControlsAuto(); // if any control option is requested, add the controls wrapper\n\n        if (slider.settings.controls || slider.settings.autoControls || slider.settings.pager) slider.viewport.after(slider.controls.el); // if ticker mode, do not allow a pager\n      } else {\n        slider.settings.pager = false;\n      } // preload all images, then perform final DOM / CSS modifications that depend on images being loaded\n\n\n      loadElements(preloadSelector, start);\n    };\n\n    var loadElements = function loadElements(selector, callback) {\n      var total = selector.find('img, iframe').length;\n\n      if (total == 0) {\n        callback();\n        return;\n      }\n\n      var count = 0;\n      selector.find('img, iframe').each(function () {\n        $(this).one('load', function () {\n          if (++count == total) callback();\n        }).each(function () {\n          if (this.complete) $(this).load();\n        });\n      });\n    };\n    /**\n     * Start the slider\n     */\n\n\n    var start = function start() {\n      // if infinite loop, prepare additional slides\n      if (slider.settings.infiniteLoop && slider.settings.mode != 'fade' && !slider.settings.ticker) {\n        var slice = slider.settings.mode == 'vertical' ? slider.settings.minSlides : slider.settings.maxSlides;\n        var sliceAppend = slider.children.slice(0, slice).clone().addClass('bx-clone');\n        var slicePrepend = slider.children.slice(-slice).clone().addClass('bx-clone');\n        el.append(sliceAppend).prepend(slicePrepend);\n      } // remove the loading DOM element\n\n\n      slider.loader.remove(); // set the left / top position of \"el\"\n\n      setSlidePosition(); // if \"vertical\" mode, always use adaptiveHeight to prevent odd behavior\n\n      if (slider.settings.mode == 'vertical') slider.settings.adaptiveHeight = true; // set the viewport height\n\n      slider.viewport.height(getViewportHeight()); // make sure everything is positioned just right (same as a window resize)\n\n      el.redrawSlider(); // onSliderLoad callback\n\n      slider.settings.onSliderLoad(slider.active.index); // slider has been fully initialized\n\n      slider.initialized = true; // bind the resize call to the window\n\n      if (slider.settings.responsive) $(window).bind('resize', resizeWindow); // if auto is true and has more than 1 page, start the show\n\n      if (slider.settings.auto && slider.settings.autoStart && (getPagerQty() > 1 || slider.settings.autoSlideForOnePage)) initAuto(); // if ticker is true, start the ticker\n\n      if (slider.settings.ticker) initTicker(); // if pager is requested, make the appropriate pager link active\n\n      if (slider.settings.pager) updatePagerActive(slider.settings.startSlide); // check for any updates to the controls (like hideControlOnEnd updates)\n\n      if (slider.settings.controls) updateDirectionControls(); // if touchEnabled is true, setup the touch events\n\n      if (slider.settings.touchEnabled && !slider.settings.ticker) initTouch();\n    };\n    /**\n     * Returns the calculated height of the viewport, used to determine either adaptiveHeight or the maxHeight value\n     */\n\n\n    var getViewportHeight = function getViewportHeight() {\n      var height = 0; // first determine which children (slides) should be used in our height calculation\n\n      var children = $(); // if mode is not \"vertical\" and adaptiveHeight is false, include all children\n\n      if (slider.settings.mode != 'vertical' && !slider.settings.adaptiveHeight) {\n        children = slider.children;\n      } else {\n        // if not carousel, return the single active child\n        if (!slider.carousel) {\n          children = slider.children.eq(slider.active.index); // if carousel, return a slice of children\n        } else {\n          // get the individual slide index\n          var currentIndex = slider.settings.moveSlides == 1 ? slider.active.index : slider.active.index * getMoveBy(); // add the current slide to the children\n\n          children = slider.children.eq(currentIndex); // cycle through the remaining \"showing\" slides\n\n          for (i = 1; i <= slider.settings.maxSlides - 1; i++) {\n            // if looped back to the start\n            if (currentIndex + i >= slider.children.length) {\n              children = children.add(slider.children.eq(i - 1));\n            } else {\n              children = children.add(slider.children.eq(currentIndex + i));\n            }\n          }\n        }\n      } // if \"vertical\" mode, calculate the sum of the heights of the children\n\n\n      if (slider.settings.mode == 'vertical') {\n        children.each(function (index) {\n          height += $(this).outerHeight();\n        }); // add user-supplied margins\n\n        if (slider.settings.slideMargin > 0) {\n          height += slider.settings.slideMargin * (slider.settings.minSlides - 1);\n        } // if not \"vertical\" mode, calculate the max height of the children\n\n      } else {\n        height = Math.max.apply(Math, children.map(function () {\n          return $(this).outerHeight(false);\n        }).get());\n      }\n\n      if (slider.viewport.css('box-sizing') == 'border-box') {\n        height += parseFloat(slider.viewport.css('padding-top')) + parseFloat(slider.viewport.css('padding-bottom')) + parseFloat(slider.viewport.css('border-top-width')) + parseFloat(slider.viewport.css('border-bottom-width'));\n      } else if (slider.viewport.css('box-sizing') == 'padding-box') {\n        height += parseFloat(slider.viewport.css('padding-top')) + parseFloat(slider.viewport.css('padding-bottom'));\n      }\n\n      return height;\n    };\n    /**\n     * Returns the calculated width to be used for the outer wrapper / viewport\n     */\n\n\n    var getViewportMaxWidth = function getViewportMaxWidth() {\n      var width = '100%';\n\n      if (slider.settings.slideWidth > 0) {\n        if (slider.settings.mode == 'horizontal') {\n          width = slider.settings.maxSlides * slider.settings.slideWidth + (slider.settings.maxSlides - 1) * slider.settings.slideMargin;\n        } else {\n          width = slider.settings.slideWidth;\n        }\n      }\n\n      return width;\n    };\n    /**\n     * Returns the calculated width to be applied to each slide\n     */\n\n\n    var getSlideWidth = function getSlideWidth() {\n      // start with any user-supplied slide width\n      var newElWidth = slider.settings.slideWidth; // get the current viewport width\n\n      var wrapWidth = slider.viewport.width(); // if slide width was not supplied, or is larger than the viewport use the viewport width\n\n      if (slider.settings.slideWidth == 0 || slider.settings.slideWidth > wrapWidth && !slider.carousel || slider.settings.mode == 'vertical') {\n        newElWidth = wrapWidth; // if carousel, use the thresholds to determine the width\n      } else if (slider.settings.maxSlides > 1 && slider.settings.mode == 'horizontal') {\n        if (wrapWidth > slider.maxThreshold) {// newElWidth = (wrapWidth - (slider.settings.slideMargin * (slider.settings.maxSlides - 1))) / slider.settings.maxSlides;\n        } else if (wrapWidth < slider.minThreshold) {\n          newElWidth = (wrapWidth - slider.settings.slideMargin * (slider.settings.minSlides - 1)) / slider.settings.minSlides;\n        }\n      }\n\n      return newElWidth;\n    };\n    /**\n     * Returns the number of slides currently visible in the viewport (includes partially visible slides)\n     */\n\n\n    var getNumberSlidesShowing = function getNumberSlidesShowing() {\n      var slidesShowing = 1;\n\n      if (slider.settings.mode == 'horizontal' && slider.settings.slideWidth > 0) {\n        // if viewport is smaller than minThreshold, return minSlides\n        if (slider.viewport.width() < slider.minThreshold) {\n          slidesShowing = slider.settings.minSlides; // if viewport is larger than minThreshold, return maxSlides\n        } else if (slider.viewport.width() > slider.maxThreshold) {\n          slidesShowing = slider.settings.maxSlides; // if viewport is between min / max thresholds, divide viewport width by first child width\n        } else {\n          var childWidth = slider.children.first().width() + slider.settings.slideMargin;\n          slidesShowing = Math.floor((slider.viewport.width() + slider.settings.slideMargin) / childWidth);\n        } // if \"vertical\" mode, slides showing will always be minSlides\n\n      } else if (slider.settings.mode == 'vertical') {\n        slidesShowing = slider.settings.minSlides;\n      }\n\n      return slidesShowing;\n    };\n    /**\n     * Returns the number of pages (one full viewport of slides is one \"page\")\n     */\n\n\n    var getPagerQty = function getPagerQty() {\n      var pagerQty = 0; // if moveSlides is specified by the user\n\n      if (slider.settings.moveSlides > 0) {\n        if (slider.settings.infiniteLoop) {\n          pagerQty = Math.ceil(slider.children.length / getMoveBy());\n        } else {\n          // use a while loop to determine pages\n          var breakPoint = 0;\n          var counter = 0; // when breakpoint goes above children length, counter is the number of pages\n\n          while (breakPoint < slider.children.length) {\n            ++pagerQty;\n            breakPoint = counter + getNumberSlidesShowing();\n            counter += slider.settings.moveSlides <= getNumberSlidesShowing() ? slider.settings.moveSlides : getNumberSlidesShowing();\n          }\n        } // if moveSlides is 0 (auto) divide children length by sides showing, then round up\n\n      } else {\n        pagerQty = Math.ceil(slider.children.length / getNumberSlidesShowing());\n      }\n\n      return pagerQty;\n    };\n    /**\n     * Returns the number of indivual slides by which to shift the slider\n     */\n\n\n    var getMoveBy = function getMoveBy() {\n      // if moveSlides was set by the user and moveSlides is less than number of slides showing\n      if (slider.settings.moveSlides > 0 && slider.settings.moveSlides <= getNumberSlidesShowing()) {\n        return slider.settings.moveSlides;\n      } // if moveSlides is 0 (auto)\n\n\n      return getNumberSlidesShowing();\n    };\n    /**\n     * Sets the slider's (el) left or top position\n     */\n\n\n    var setSlidePosition = function setSlidePosition() {\n      // if last slide, not infinite loop, and number of children is larger than specified maxSlides\n      if (slider.children.length > slider.settings.maxSlides && slider.active.last && !slider.settings.infiniteLoop) {\n        if (slider.settings.mode == 'horizontal') {\n          // get the last child's position\n          var lastChild = slider.children.last();\n          var position = lastChild.position(); // set the left position\n\n          setPositionProperty(-(position.left - (slider.viewport.width() - lastChild.outerWidth())), 'reset', 0);\n        } else if (slider.settings.mode == 'vertical') {\n          // get the last showing index's position\n          var lastShowingIndex = slider.children.length - slider.settings.minSlides;\n          var position = slider.children.eq(lastShowingIndex).position(); // set the top position\n\n          setPositionProperty(-position.top, 'reset', 0);\n        } // if not last slide\n\n      } else {\n        // get the position of the first showing slide\n        var position = slider.children.eq(slider.active.index * getMoveBy()).position(); // check for last slide\n\n        if (slider.active.index == getPagerQty() - 1) slider.active.last = true; // set the repective position\n\n        if (position != undefined) {\n          if (slider.settings.mode == 'horizontal') setPositionProperty(-position.left, 'reset', 0);else if (slider.settings.mode == 'vertical') setPositionProperty(-position.top, 'reset', 0);\n        }\n      }\n    };\n    /**\n     * Sets the el's animating property position (which in turn will sometimes animate el).\n     * If using CSS, sets the transform property. If not using CSS, sets the top / left property.\n     *\n     * @param value (int)\n     *  - the animating property's value\n     *\n     * @param type (string) 'slider', 'reset', 'ticker'\n     *  - the type of instance for which the function is being\n     *\n     * @param duration (int)\n     *  - the amount of time (in ms) the transition should occupy\n     *\n     * @param params (array) optional\n     *  - an optional parameter containing any variables that need to be passed in\n     */\n\n\n    var setPositionProperty = function setPositionProperty(value, type, duration, params) {\n      // use CSS transform\n      if (slider.usingCSS) {\n        // determine the translate3d value\n        var propValue = slider.settings.mode == 'vertical' ? 'translate3d(0, ' + value + 'px, 0)' : 'translate3d(' + value + 'px, 0, 0)'; // add the CSS transition-duration\n\n        el.css('-' + slider.cssPrefix + '-transition-duration', duration / 1000 + 's');\n\n        if (type == 'slide') {\n          // set the property value\n          el.css(slider.animProp, propValue); // bind a callback method - executes when CSS transition completes\n\n          el.bind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function () {\n            // unbind the callback\n            el.unbind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');\n            updateAfterSlideTransition();\n          });\n        } else if (type == 'reset') {\n          el.css(slider.animProp, propValue);\n        } else if (type == 'ticker') {\n          // make the transition use 'linear'\n          el.css('-' + slider.cssPrefix + '-transition-timing-function', 'linear');\n          el.css(slider.animProp, propValue); // bind a callback method - executes when CSS transition completes\n\n          el.bind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function () {\n            // unbind the callback\n            el.unbind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd'); // reset the position\n\n            setPositionProperty(params['resetValue'], 'reset', 0); // start the loop again\n\n            tickerLoop();\n          });\n        } // use JS animate\n\n      } else {\n        var animateObj = {};\n        animateObj[slider.animProp] = value;\n\n        if (type == 'slide') {\n          el.animate(animateObj, duration, slider.settings.easing, function () {\n            updateAfterSlideTransition();\n          });\n        } else if (type == 'reset') {\n          el.css(slider.animProp, value);\n        } else if (type == 'ticker') {\n          el.animate(animateObj, speed, 'linear', function () {\n            setPositionProperty(params['resetValue'], 'reset', 0); // run the recursive loop after animation\n\n            tickerLoop();\n          });\n        }\n      }\n    };\n    /**\n     * Populates the pager with proper amount of pages\n     */\n\n\n    var populatePager = function populatePager() {\n      var pagerHtml = '';\n      var pagerQty = getPagerQty(); // loop through each pager item\n\n      for (var i = 0; i < pagerQty; i++) {\n        var linkContent = ''; // if a buildPager function is supplied, use it to get pager link value, else use index + 1\n\n        if (slider.settings.buildPager && $.isFunction(slider.settings.buildPager)) {\n          linkContent = slider.settings.buildPager(i);\n          slider.pagerEl.addClass('bx-custom-pager');\n        } else {\n          linkContent = i + 1;\n          slider.pagerEl.addClass('bx-default-pager');\n        } // var linkContent = slider.settings.buildPager && $.isFunction(slider.settings.buildPager) ? slider.settings.buildPager(i) : i + 1;\n        // add the markup to the string\n\n\n        pagerHtml += '<div class=\"bx-pager-item\"><a href=\"\" data-slide-index=\"' + i + '\" class=\"bx-pager-link\">' + linkContent + '</a></div>';\n      }\n\n      ; // populate the pager element with pager links\n\n      slider.pagerEl.html(pagerHtml);\n    };\n    /**\n     * Appends the pager to the controls element\n     */\n\n\n    var appendPager = function appendPager() {\n      if (!slider.settings.pagerCustom) {\n        // create the pager DOM element\n        slider.pagerEl = $('<div class=\"bx-pager\" />'); // if a pager selector was supplied, populate it with the pager\n\n        if (slider.settings.pagerSelector) {\n          $(slider.settings.pagerSelector).html(slider.pagerEl); // if no pager selector was supplied, add it after the wrapper\n        } else {\n          slider.controls.el.addClass('bx-has-pager').append(slider.pagerEl);\n        } // populate the pager\n\n\n        populatePager();\n      } else {\n        slider.pagerEl = $(slider.settings.pagerCustom);\n      } // assign the pager click binding\n\n\n      slider.pagerEl.on('click', 'a', clickPagerBind);\n    };\n    /**\n     * Appends prev / next controls to the controls element\n     */\n\n\n    var appendControls = function appendControls() {\n      slider.controls.next = $('<a class=\"bx-next\" href=\"\">' + slider.settings.nextText + '</a>');\n      slider.controls.prev = $('<a class=\"bx-prev\" href=\"\">' + slider.settings.prevText + '</a>'); // bind click actions to the controls\n\n      slider.controls.next.bind('click', clickNextBind);\n      slider.controls.prev.bind('click', clickPrevBind); // if nextSlector was supplied, populate it\n\n      if (slider.settings.nextSelector) {\n        $(slider.settings.nextSelector).append(slider.controls.next);\n      } // if prevSlector was supplied, populate it\n\n\n      if (slider.settings.prevSelector) {\n        $(slider.settings.prevSelector).append(slider.controls.prev);\n      } // if no custom selectors were supplied\n\n\n      if (!slider.settings.nextSelector && !slider.settings.prevSelector) {\n        // add the controls to the DOM\n        slider.controls.directionEl = $('<div class=\"bx-controls-direction\" />'); // add the control elements to the directionEl\n\n        slider.controls.directionEl.append(slider.controls.prev).append(slider.controls.next); // slider.viewport.append(slider.controls.directionEl);\n\n        slider.controls.el.addClass('bx-has-controls-direction').append(slider.controls.directionEl);\n      }\n    };\n    /**\n     * Appends start / stop auto controls to the controls element\n     */\n\n\n    var appendControlsAuto = function appendControlsAuto() {\n      slider.controls.start = $('<div class=\"bx-controls-auto-item\"><a class=\"bx-start\" href=\"\">' + slider.settings.startText + '</a></div>');\n      slider.controls.stop = $('<div class=\"bx-controls-auto-item\"><a class=\"bx-stop\" href=\"\">' + slider.settings.stopText + '</a></div>'); // add the controls to the DOM\n\n      slider.controls.autoEl = $('<div class=\"bx-controls-auto\" />'); // bind click actions to the controls\n\n      slider.controls.autoEl.on('click', '.bx-start', clickStartBind);\n      slider.controls.autoEl.on('click', '.bx-stop', clickStopBind); // if autoControlsCombine, insert only the \"start\" control\n\n      if (slider.settings.autoControlsCombine) {\n        slider.controls.autoEl.append(slider.controls.start); // if autoControlsCombine is false, insert both controls\n      } else {\n        slider.controls.autoEl.append(slider.controls.start).append(slider.controls.stop);\n      } // if auto controls selector was supplied, populate it with the controls\n\n\n      if (slider.settings.autoControlsSelector) {\n        $(slider.settings.autoControlsSelector).html(slider.controls.autoEl); // if auto controls selector was not supplied, add it after the wrapper\n      } else {\n        slider.controls.el.addClass('bx-has-controls-auto').append(slider.controls.autoEl);\n      } // update the auto controls\n\n\n      updateAutoControls(slider.settings.autoStart ? 'stop' : 'start');\n    };\n    /**\n     * Appends image captions to the DOM\n     */\n\n\n    var appendCaptions = function appendCaptions() {\n      // cycle through each child\n      slider.children.each(function (index) {\n        // get the image title attribute\n        var title = $(this).find('img:first').attr('title'); // append the caption\n\n        if (title != undefined && ('' + title).length) {\n          $(this).append('<div class=\"bx-caption\"><span>' + title + '</span></div>');\n        }\n      });\n    };\n    /**\n     * Click next binding\n     *\n     * @param e (event)\n     *  - DOM event object\n     */\n\n\n    var clickNextBind = function clickNextBind(e) {\n      // if auto show is running, stop it\n      if (slider.settings.auto) el.stopAuto();\n      el.goToNextSlide();\n      e.preventDefault();\n    };\n    /**\n     * Click prev binding\n     *\n     * @param e (event)\n     *  - DOM event object\n     */\n\n\n    var clickPrevBind = function clickPrevBind(e) {\n      // if auto show is running, stop it\n      if (slider.settings.auto) el.stopAuto();\n      el.goToPrevSlide();\n      e.preventDefault();\n    };\n    /**\n     * Click start binding\n     *\n     * @param e (event)\n     *  - DOM event object\n     */\n\n\n    var clickStartBind = function clickStartBind(e) {\n      el.startAuto();\n      e.preventDefault();\n    };\n    /**\n     * Click stop binding\n     *\n     * @param e (event)\n     *  - DOM event object\n     */\n\n\n    var clickStopBind = function clickStopBind(e) {\n      el.stopAuto();\n      e.preventDefault();\n    };\n    /**\n     * Click pager binding\n     *\n     * @param e (event)\n     *  - DOM event object\n     */\n\n\n    var clickPagerBind = function clickPagerBind(e) {\n      // if auto show is running, stop it\n      if (slider.settings.auto) el.stopAuto();\n      var pagerLink = $(e.currentTarget);\n\n      if (pagerLink.attr('data-slide-index') !== undefined) {\n        var pagerIndex = parseInt(pagerLink.attr('data-slide-index')); // if clicked pager link is not active, continue with the goToSlide call\n\n        if (pagerIndex != slider.active.index) el.goToSlide(pagerIndex);\n        e.preventDefault();\n      }\n    };\n    /**\n     * Updates the pager links with an active class\n     *\n     * @param slideIndex (int)\n     *  - index of slide to make active\n     */\n\n\n    var updatePagerActive = function updatePagerActive(slideIndex) {\n      // if \"short\" pager type\n      var len = slider.children.length; // nb of children\n\n      if (slider.settings.pagerType == 'short') {\n        if (slider.settings.maxSlides > 1) {\n          len = Math.ceil(slider.children.length / slider.settings.maxSlides);\n        }\n\n        slider.pagerEl.html(slideIndex + 1 + slider.settings.pagerShortSeparator + len);\n        return;\n      } // remove all pager active classes\n\n\n      slider.pagerEl.find('a').removeClass('active'); // apply the active class for all pagers\n\n      slider.pagerEl.each(function (i, el) {\n        $(el).find('a').eq(slideIndex).addClass('active');\n      });\n    };\n    /**\n     * Performs needed actions after a slide transition\n     */\n\n\n    var updateAfterSlideTransition = function updateAfterSlideTransition() {\n      // if infinte loop is true\n      if (slider.settings.infiniteLoop) {\n        var position = ''; // first slide\n\n        if (slider.active.index == 0) {\n          // set the new position\n          position = slider.children.eq(0).position(); // carousel, last slide\n        } else if (slider.active.index == getPagerQty() - 1 && slider.carousel) {\n          position = slider.children.eq((getPagerQty() - 1) * getMoveBy()).position(); // last slide\n        } else if (slider.active.index == slider.children.length - 1) {\n          position = slider.children.eq(slider.children.length - 1).position();\n        }\n\n        if (position) {\n          if (slider.settings.mode == 'horizontal') {\n            setPositionProperty(-position.left, 'reset', 0);\n          } else if (slider.settings.mode == 'vertical') {\n            setPositionProperty(-position.top, 'reset', 0);\n          }\n        }\n      } // declare that the transition is complete\n\n\n      slider.working = false; // onSlideAfter callback\n\n      slider.settings.onSlideAfter(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);\n    };\n    /**\n     * Updates the auto controls state (either active, or combined switch)\n     *\n     * @param state (string) \"start\", \"stop\"\n     *  - the new state of the auto show\n     */\n\n\n    var updateAutoControls = function updateAutoControls(state) {\n      // if autoControlsCombine is true, replace the current control with the new state\n      if (slider.settings.autoControlsCombine) {\n        slider.controls.autoEl.html(slider.controls[state]); // if autoControlsCombine is false, apply the \"active\" class to the appropriate control\n      } else {\n        slider.controls.autoEl.find('a').removeClass('active');\n        slider.controls.autoEl.find('a:not(.bx-' + state + ')').addClass('active');\n      }\n    };\n    /**\n     * Updates the direction controls (checks if either should be hidden)\n     */\n\n\n    var updateDirectionControls = function updateDirectionControls() {\n      if (getPagerQty() == 1) {\n        slider.controls.prev.addClass('disabled');\n        slider.controls.next.addClass('disabled');\n      } else if (!slider.settings.infiniteLoop && slider.settings.hideControlOnEnd) {\n        // if first slide\n        if (slider.active.index == 0) {\n          slider.controls.prev.addClass('disabled');\n          slider.controls.next.removeClass('disabled'); // if last slide\n        } else if (slider.active.index == getPagerQty() - 1) {\n          slider.controls.next.addClass('disabled');\n          slider.controls.prev.removeClass('disabled'); // if any slide in the middle\n        } else {\n          slider.controls.prev.removeClass('disabled');\n          slider.controls.next.removeClass('disabled');\n        }\n      }\n    };\n    /**\n     * Initialzes the auto process\n     */\n\n\n    var initAuto = function initAuto() {\n      // if autoDelay was supplied, launch the auto show using a setTimeout() call\n      if (slider.settings.autoDelay > 0) {\n        var timeout = setTimeout(el.startAuto, slider.settings.autoDelay); // if autoDelay was not supplied, start the auto show normally\n      } else {\n        el.startAuto();\n      } // if autoHover is requested\n\n\n      if (slider.settings.autoHover) {\n        // on el hover\n        el.hover(function () {\n          // if the auto show is currently playing (has an active interval)\n          if (slider.interval) {\n            // stop the auto show and pass true agument which will prevent control update\n            el.stopAuto(true); // create a new autoPaused value which will be used by the relative \"mouseout\" event\n\n            slider.autoPaused = true;\n          }\n        }, function () {\n          // if the autoPaused value was created be the prior \"mouseover\" event\n          if (slider.autoPaused) {\n            // start the auto show and pass true agument which will prevent control update\n            el.startAuto(true); // reset the autoPaused value\n\n            slider.autoPaused = null;\n          }\n        });\n      }\n    };\n    /**\n     * Initialzes the ticker process\n     */\n\n\n    var initTicker = function initTicker() {\n      var startPosition = 0; // if autoDirection is \"next\", append a clone of the entire slider\n\n      if (slider.settings.autoDirection == 'next') {\n        el.append(slider.children.clone().addClass('bx-clone')); // if autoDirection is \"prev\", prepend a clone of the entire slider, and set the left position\n      } else {\n        el.prepend(slider.children.clone().addClass('bx-clone'));\n        var position = slider.children.first().position();\n        startPosition = slider.settings.mode == 'horizontal' ? -position.left : -position.top;\n      }\n\n      setPositionProperty(startPosition, 'reset', 0); // do not allow controls in ticker mode\n\n      slider.settings.pager = false;\n      slider.settings.controls = false;\n      slider.settings.autoControls = false; // if autoHover is requested\n\n      if (slider.settings.tickerHover && !slider.usingCSS) {\n        // on el hover\n        slider.viewport.hover(function () {\n          el.stop();\n        }, function () {\n          // calculate the total width of children (used to calculate the speed ratio)\n          var totalDimens = 0;\n          slider.children.each(function (index) {\n            totalDimens += slider.settings.mode == 'horizontal' ? $(this).outerWidth(true) : $(this).outerHeight(true);\n          }); // calculate the speed ratio (used to determine the new speed to finish the paused animation)\n\n          var ratio = slider.settings.speed / totalDimens; // determine which property to use\n\n          var property = slider.settings.mode == 'horizontal' ? 'left' : 'top'; // calculate the new speed\n\n          var newSpeed = ratio * (totalDimens - Math.abs(parseInt(el.css(property))));\n          tickerLoop(newSpeed);\n        });\n      } // start the ticker loop\n\n\n      tickerLoop();\n    };\n    /**\n     * Runs a continuous loop, news ticker-style\n     */\n\n\n    var tickerLoop = function tickerLoop(resumeSpeed) {\n      speed = resumeSpeed ? resumeSpeed : slider.settings.speed;\n      var position = {\n        left: 0,\n        top: 0\n      };\n      var reset = {\n        left: 0,\n        top: 0\n      }; // if \"next\" animate left position to last child, then reset left to 0\n\n      if (slider.settings.autoDirection == 'next') {\n        position = el.find('.bx-clone').first().position(); // if \"prev\" animate left position to 0, then reset left to first non-clone child\n      } else {\n        reset = slider.children.first().position();\n      }\n\n      var animateProperty = slider.settings.mode == 'horizontal' ? -position.left : -position.top;\n      var resetValue = slider.settings.mode == 'horizontal' ? -reset.left : -reset.top;\n      var params = {\n        resetValue: resetValue\n      };\n      setPositionProperty(animateProperty, 'ticker', speed, params);\n    };\n    /**\n     * Initializes touch events\n     */\n\n\n    var initTouch = function initTouch() {\n      // initialize object to contain all touch values\n      slider.touch = {\n        start: {\n          x: 0,\n          y: 0\n        },\n        end: {\n          x: 0,\n          y: 0\n        }\n      };\n      slider.viewport.bind('touchstart', onTouchStart);\n    };\n    /**\n     * Event handler for \"touchstart\"\n     *\n     * @param e (event)\n     *  - DOM event object\n     */\n\n\n    var onTouchStart = function onTouchStart(e) {\n      if (slider.working) {\n        e.preventDefault();\n      } else {\n        // record the original position when touch starts\n        slider.touch.originalPos = el.position();\n        var orig = e.originalEvent; // record the starting touch x, y coordinates\n\n        slider.touch.start.x = orig.changedTouches[0].pageX;\n        slider.touch.start.y = orig.changedTouches[0].pageY; // bind a \"touchmove\" event to the viewport\n\n        slider.viewport.bind('touchmove', onTouchMove); // bind a \"touchend\" event to the viewport\n\n        slider.viewport.bind('touchend', onTouchEnd);\n      }\n    };\n    /**\n     * Event handler for \"touchmove\"\n     *\n     * @param e (event)\n     *  - DOM event object\n     */\n\n\n    var onTouchMove = function onTouchMove(e) {\n      var orig = e.originalEvent; // if scrolling on y axis, do not prevent default\n\n      var xMovement = Math.abs(orig.changedTouches[0].pageX - slider.touch.start.x);\n      var yMovement = Math.abs(orig.changedTouches[0].pageY - slider.touch.start.y); // x axis swipe\n\n      if (xMovement * 3 > yMovement && slider.settings.preventDefaultSwipeX) {\n        e.preventDefault(); // y axis swipe\n      } else if (yMovement * 3 > xMovement && slider.settings.preventDefaultSwipeY) {\n        e.preventDefault();\n      }\n\n      if (slider.settings.mode != 'fade' && slider.settings.oneToOneTouch) {\n        var value = 0; // if horizontal, drag along x axis\n\n        if (slider.settings.mode == 'horizontal') {\n          var change = orig.changedTouches[0].pageX - slider.touch.start.x;\n          value = slider.touch.originalPos.left + change; // if vertical, drag along y axis\n        } else {\n          var change = orig.changedTouches[0].pageY - slider.touch.start.y;\n          value = slider.touch.originalPos.top + change;\n        }\n\n        setPositionProperty(value, 'reset', 0);\n      }\n    };\n    /**\n     * Event handler for \"touchend\"\n     *\n     * @param e (event)\n     *  - DOM event object\n     */\n\n\n    var onTouchEnd = function onTouchEnd(e) {\n      slider.viewport.unbind('touchmove', onTouchMove);\n      var orig = e.originalEvent;\n      var value = 0; // record end x, y positions\n\n      slider.touch.end.x = orig.changedTouches[0].pageX;\n      slider.touch.end.y = orig.changedTouches[0].pageY; // if fade mode, check if absolute x distance clears the threshold\n\n      if (slider.settings.mode == 'fade') {\n        var distance = Math.abs(slider.touch.start.x - slider.touch.end.x);\n\n        if (distance >= slider.settings.swipeThreshold) {\n          slider.touch.start.x > slider.touch.end.x ? el.goToNextSlide() : el.goToPrevSlide();\n          el.stopAuto();\n        } // not fade mode\n\n      } else {\n        var distance = 0; // calculate distance and el's animate property\n\n        if (slider.settings.mode == 'horizontal') {\n          distance = slider.touch.end.x - slider.touch.start.x;\n          value = slider.touch.originalPos.left;\n        } else {\n          distance = slider.touch.end.y - slider.touch.start.y;\n          value = slider.touch.originalPos.top;\n        } // if not infinite loop and first / last slide, do not attempt a slide transition\n\n\n        if (!slider.settings.infiniteLoop && (slider.active.index == 0 && distance > 0 || slider.active.last && distance < 0)) {\n          setPositionProperty(value, 'reset', 200);\n        } else {\n          // check if distance clears threshold\n          if (Math.abs(distance) >= slider.settings.swipeThreshold) {\n            distance < 0 ? el.goToNextSlide() : el.goToPrevSlide();\n            el.stopAuto();\n          } else {\n            // el.animate(property, 200);\n            setPositionProperty(value, 'reset', 200);\n          }\n        }\n      }\n\n      slider.viewport.unbind('touchend', onTouchEnd);\n    };\n    /**\n     * Window resize event callback\n     */\n\n\n    var resizeWindow = function resizeWindow(e) {\n      // don't do anything if slider isn't initialized.\n      if (!slider.initialized) return; // get the new window dimens (again, thank you IE)\n\n      var windowWidthNew = $(window).width();\n      var windowHeightNew = $(window).height(); // make sure that it is a true window resize\n      // *we must check this because our dinosaur friend IE fires a window resize event when certain DOM elements\n      // are resized. Can you just die already?*\n\n      if (windowWidth != windowWidthNew || windowHeight != windowHeightNew) {\n        // set the new window dimens\n        windowWidth = windowWidthNew;\n        windowHeight = windowHeightNew; // update all dynamic elements\n\n        el.redrawSlider(); // Call user resize handler\n\n        slider.settings.onSliderResize.call(el, slider.active.index);\n      }\n    };\n    /**\n     * ===================================================================================\n     * = PUBLIC FUNCTIONS\n     * ===================================================================================\n     */\n\n    /**\n     * Performs slide transition to the specified slide\n     *\n     * @param slideIndex (int)\n     *  - the destination slide's index (zero-based)\n     *\n     * @param direction (string)\n     *  - INTERNAL USE ONLY - the direction of travel (\"prev\" / \"next\")\n     */\n\n\n    el.goToSlide = function (slideIndex, direction) {\n      // if plugin is currently in motion, ignore request\n      if (slider.working || slider.active.index == slideIndex) return; // declare that plugin is in motion\n\n      slider.working = true; // store the old index\n\n      slider.oldIndex = slider.active.index; // if slideIndex is less than zero, set active index to last child (this happens during infinite loop)\n\n      if (slideIndex < 0) {\n        slider.active.index = getPagerQty() - 1; // if slideIndex is greater than children length, set active index to 0 (this happens during infinite loop)\n      } else if (slideIndex >= getPagerQty()) {\n        slider.active.index = 0; // set active index to requested slide\n      } else {\n        slider.active.index = slideIndex;\n      } // onSlideBefore, onSlideNext, onSlidePrev callbacks\n\n\n      slider.settings.onSlideBefore(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);\n\n      if (direction == 'next') {\n        slider.settings.onSlideNext(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);\n      } else if (direction == 'prev') {\n        slider.settings.onSlidePrev(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);\n      } // check if last slide\n\n\n      slider.active.last = slider.active.index >= getPagerQty() - 1; // update the pager with active class\n\n      if (slider.settings.pager) updatePagerActive(slider.active.index); // // check for direction control update\n\n      if (slider.settings.controls) updateDirectionControls(); // if slider is set to mode: \"fade\"\n\n      if (slider.settings.mode == 'fade') {\n        // if adaptiveHeight is true and next height is different from current height, animate to the new height\n        if (slider.settings.adaptiveHeight && slider.viewport.height() != getViewportHeight()) {\n          slider.viewport.animate({\n            height: getViewportHeight()\n          }, slider.settings.adaptiveHeightSpeed);\n        } // fade out the visible child and reset its z-index value\n\n\n        slider.children.filter(':visible').fadeOut(slider.settings.speed).css({\n          zIndex: 0\n        }); // fade in the newly requested slide\n\n        slider.children.eq(slider.active.index).css('zIndex', slider.settings.slideZIndex + 1).fadeIn(slider.settings.speed, function () {\n          $(this).css('zIndex', slider.settings.slideZIndex);\n          updateAfterSlideTransition();\n        }); // slider mode is not \"fade\"\n      } else {\n        // if adaptiveHeight is true and next height is different from current height, animate to the new height\n        if (slider.settings.adaptiveHeight && slider.viewport.height() != getViewportHeight()) {\n          slider.viewport.animate({\n            height: getViewportHeight()\n          }, slider.settings.adaptiveHeightSpeed);\n        }\n\n        var moveBy = 0;\n        var position = {\n          left: 0,\n          top: 0\n        }; // if carousel and not infinite loop\n\n        if (!slider.settings.infiniteLoop && slider.carousel && slider.active.last) {\n          if (slider.settings.mode == 'horizontal') {\n            // get the last child position\n            var lastChild = slider.children.eq(slider.children.length - 1);\n            position = lastChild.position(); // calculate the position of the last slide\n\n            moveBy = slider.viewport.width() - lastChild.outerWidth();\n          } else {\n            // get last showing index position\n            var lastShowingIndex = slider.children.length - slider.settings.minSlides;\n            position = slider.children.eq(lastShowingIndex).position();\n          } // horizontal carousel, going previous while on first slide (infiniteLoop mode)\n\n        } else if (slider.carousel && slider.active.last && direction == 'prev') {\n          // get the last child position\n          var eq = slider.settings.moveSlides == 1 ? slider.settings.maxSlides - getMoveBy() : (getPagerQty() - 1) * getMoveBy() - (slider.children.length - slider.settings.maxSlides);\n          var lastChild = el.children('.bx-clone').eq(eq);\n          position = lastChild.position(); // if infinite loop and \"Next\" is clicked on the last slide\n        } else if (direction == 'next' && slider.active.index == 0) {\n          // get the last clone position\n          position = el.find('> .bx-clone').eq(slider.settings.maxSlides).position();\n          slider.active.last = false; // normal non-zero requests\n        } else if (slideIndex >= 0) {\n          var requestEl = slideIndex * getMoveBy();\n          position = slider.children.eq(requestEl).position();\n        }\n        /* If the position doesn't exist\n         * (e.g. if you destroy the slider on a next click),\n         * it doesn't throw an error.\n         */\n\n\n        if (\"undefined\" !== typeof position) {\n          var value = slider.settings.mode == 'horizontal' ? -(position.left - moveBy) : -position.top; // plugin values to be animated\n\n          setPositionProperty(value, 'slide', slider.settings.speed);\n        }\n      }\n    };\n    /**\n     * Transitions to the next slide in the show\n     */\n\n\n    el.goToNextSlide = function () {\n      // if infiniteLoop is false and last page is showing, disregard call\n      if (!slider.settings.infiniteLoop && slider.active.last) return;\n      var pagerIndex = parseInt(slider.active.index) + 1;\n      el.goToSlide(pagerIndex, 'next');\n    };\n    /**\n     * Transitions to the prev slide in the show\n     */\n\n\n    el.goToPrevSlide = function () {\n      // if infiniteLoop is false and last page is showing, disregard call\n      if (!slider.settings.infiniteLoop && slider.active.index == 0) return;\n      var pagerIndex = parseInt(slider.active.index) - 1;\n      el.goToSlide(pagerIndex, 'prev');\n    };\n    /**\n     * Starts the auto show\n     *\n     * @param preventControlUpdate (boolean)\n     *  - if true, auto controls state will not be updated\n     */\n\n\n    el.startAuto = function (preventControlUpdate) {\n      // if an interval already exists, disregard call\n      if (slider.interval) return; // create an interval\n\n      slider.interval = setInterval(function () {\n        slider.settings.autoDirection == 'next' ? el.goToNextSlide() : el.goToPrevSlide();\n      }, slider.settings.pause); // if auto controls are displayed and preventControlUpdate is not true\n\n      if (slider.settings.autoControls && preventControlUpdate != true) updateAutoControls('stop');\n    };\n    /**\n     * Stops the auto show\n     *\n     * @param preventControlUpdate (boolean)\n     *  - if true, auto controls state will not be updated\n     */\n\n\n    el.stopAuto = function (preventControlUpdate) {\n      // if no interval exists, disregard call\n      if (!slider.interval) return; // clear the interval\n\n      clearInterval(slider.interval);\n      slider.interval = null; // if auto controls are displayed and preventControlUpdate is not true\n\n      if (slider.settings.autoControls && preventControlUpdate != true) updateAutoControls('start');\n    };\n    /**\n     * Returns current slide index (zero-based)\n     */\n\n\n    el.getCurrentSlide = function () {\n      return slider.active.index;\n    };\n    /**\n     * Returns current slide element\n     */\n\n\n    el.getCurrentSlideElement = function () {\n      return slider.children.eq(slider.active.index);\n    };\n    /**\n     * Returns number of slides in show\n     */\n\n\n    el.getSlideCount = function () {\n      return slider.children.length;\n    };\n    /**\n     * Update all dynamic slider elements\n     */\n\n\n    el.redrawSlider = function () {\n      // resize all children in ratio to new screen size\n      slider.children.add(el.find('.bx-clone')).width(getSlideWidth()); // adjust the height\n\n      slider.viewport.css('height', getViewportHeight()); // update the slide position\n\n      if (!slider.settings.ticker) setSlidePosition(); // if active.last was true before the screen resize, we want\n      // to keep it last no matter what screen size we end on\n\n      if (slider.active.last) slider.active.index = getPagerQty() - 1; // if the active index (page) no longer exists due to the resize, simply set the index as last\n\n      if (slider.active.index >= getPagerQty()) slider.active.last = true; // if a pager is being displayed and a custom pager is not being used, update it\n\n      if (slider.settings.pager && !slider.settings.pagerCustom) {\n        populatePager();\n        updatePagerActive(slider.active.index);\n      }\n    };\n    /**\n     * Destroy the current instance of the slider (revert everything back to original state)\n     */\n\n\n    el.destroySlider = function () {\n      // don't do anything if slider has already been destroyed\n      if (!slider.initialized) return;\n      slider.initialized = false;\n      $('.bx-clone', this).remove();\n      slider.children.each(function () {\n        $(this).data(\"origStyle\") != undefined ? $(this).attr(\"style\", $(this).data(\"origStyle\")) : $(this).removeAttr('style');\n      });\n      $(this).data(\"origStyle\") != undefined ? this.attr(\"style\", $(this).data(\"origStyle\")) : $(this).removeAttr('style');\n      $(this).unwrap().unwrap();\n      if (slider.controls.el) slider.controls.el.remove();\n      if (slider.controls.next) slider.controls.next.remove();\n      if (slider.controls.prev) slider.controls.prev.remove();\n      if (slider.pagerEl && slider.settings.controls) slider.pagerEl.remove();\n      $('.bx-caption', this).remove();\n      if (slider.controls.autoEl) slider.controls.autoEl.remove();\n      clearInterval(slider.interval);\n      if (slider.settings.responsive) $(window).unbind('resize', resizeWindow);\n    };\n    /**\n     * Reload the slider (revert all DOM changes, and re-initialize)\n     */\n\n\n    el.reloadSlider = function (settings) {\n      if (settings != undefined) options = settings;\n      el.destroySlider();\n      init();\n    };\n\n    init(); // returns the current jQuery object\n\n    return this;\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/front/js/jquery.bxslider.js\n");

            /***/
        }),

        /***/ "./resources/assets/front/js/mooz.scripts.min.js":
        /*!*******************************************************!*\
          !*** ./resources/assets/front/js/mooz.scripts.min.js ***!
          \*******************************************************/
        /***/ (() => {

            eval("// hide #back-top first\n$(\"#back-top\").hide(); // fade in #back-top\n\n$(window).scroll(function () {\n  if ($(this).scrollTop() > 100) {\n    $('#back-top').fadeIn();\n  } else {\n    $('#back-top').fadeOut();\n  }\n}); // scroll body to 0px on click\n\n$('#back-top a').on(\"click\", function () {\n  $('body,html').animate({\n    scrollTop: 0\n  }, 800);\n  return false;\n}); // Closes the Responsive Menu on Menu Item Click\n\n$('.navbar-collapse ul li a').click(function () {\n  $('.navbar-toggle:visible').click();\n}); // slider\n\n$('.bxslider').bxSlider({\n  pager: false,\n  speed: 1000,\n  slideMargin: 0,\n  prevText: '<i class=\"fa fa-angle-left\"></i>',\n  nextText: '<i class=\"fa fa-angle-right\"></i>',\n  easing: 'ease-in-out'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2Zyb250L2pzL21vb3ouc2NyaXB0cy5taW4uanM/YmE3MCJdLCJuYW1lcyI6WyIkIiwiaGlkZSIsIndpbmRvdyIsInNjcm9sbCIsInNjcm9sbFRvcCIsImZhZGVJbiIsImZhZGVPdXQiLCJvbiIsImFuaW1hdGUiLCJjbGljayIsImJ4U2xpZGVyIiwicGFnZXIiLCJzcGVlZCIsInNsaWRlTWFyZ2luIiwicHJldlRleHQiLCJuZXh0VGV4dCIsImVhc2luZyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQUEsQ0FBQyxDQUFDLFdBQUQsQ0FBRCxDQUFlQyxJQUFmLEcsQ0FFQTs7QUFFQUQsQ0FBQyxDQUFDRSxNQUFELENBQUQsQ0FBVUMsTUFBVixDQUFpQixZQUFZO0FBQzVCLE1BQUlILENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUUksU0FBUixLQUFzQixHQUExQixFQUErQjtBQUM5QkosSUFBQUEsQ0FBQyxDQUFDLFdBQUQsQ0FBRCxDQUFlSyxNQUFmO0FBQ0EsR0FGRCxNQUVPO0FBQ05MLElBQUFBLENBQUMsQ0FBQyxXQUFELENBQUQsQ0FBZU0sT0FBZjtBQUNBO0FBQ0QsQ0FORCxFLENBUUE7O0FBQ0FOLENBQUMsQ0FBQyxhQUFELENBQUQsQ0FBaUJPLEVBQWpCLENBQW9CLE9BQXBCLEVBQTZCLFlBQVU7QUFDdENQLEVBQUFBLENBQUMsQ0FBQyxXQUFELENBQUQsQ0FBZVEsT0FBZixDQUF1QjtBQUN0QkosSUFBQUEsU0FBUyxFQUFFO0FBRFcsR0FBdkIsRUFFRyxHQUZIO0FBR0EsU0FBTyxLQUFQO0FBQ0EsQ0FMRCxFLENBT0E7O0FBQ0FKLENBQUMsQ0FBQywwQkFBRCxDQUFELENBQThCUyxLQUE5QixDQUFvQyxZQUFXO0FBQzlDVCxFQUFBQSxDQUFDLENBQUMsd0JBQUQsQ0FBRCxDQUE0QlMsS0FBNUI7QUFDQSxDQUZELEUsQ0FJQTs7QUFDQVQsQ0FBQyxDQUFDLFdBQUQsQ0FBRCxDQUFlVSxRQUFmLENBQXdCO0FBQ3ZCQyxFQUFBQSxLQUFLLEVBQUUsS0FEZ0I7QUFFdkJDLEVBQUFBLEtBQUssRUFBRSxJQUZnQjtBQUdwQkMsRUFBQUEsV0FBVyxFQUFFLENBSE87QUFJdkJDLEVBQUFBLFFBQVEsRUFBRSxrQ0FKYTtBQUt2QkMsRUFBQUEsUUFBUSxFQUFFLG1DQUxhO0FBTXZCQyxFQUFBQSxNQUFNLEVBQUU7QUFOZSxDQUF4QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIGhpZGUgI2JhY2stdG9wIGZpcnN0XHJcbiQoXCIjYmFjay10b3BcIikuaGlkZSgpO1xyXG5cclxuLy8gZmFkZSBpbiAjYmFjay10b3BcclxuXHJcbiQod2luZG93KS5zY3JvbGwoZnVuY3Rpb24gKCkge1xyXG5cdGlmICgkKHRoaXMpLnNjcm9sbFRvcCgpID4gMTAwKSB7XHJcblx0XHQkKCcjYmFjay10b3AnKS5mYWRlSW4oKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0JCgnI2JhY2stdG9wJykuZmFkZU91dCgpO1xyXG5cdH1cclxufSk7XHJcblxyXG4vLyBzY3JvbGwgYm9keSB0byAwcHggb24gY2xpY2tcclxuJCgnI2JhY2stdG9wIGEnKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCl7XHJcblx0JCgnYm9keSxodG1sJykuYW5pbWF0ZSh7XHJcblx0XHRzY3JvbGxUb3A6IDBcclxuXHR9LCA4MDApO1xyXG5cdHJldHVybiBmYWxzZTtcclxufSk7XHJcblxyXG4vLyBDbG9zZXMgdGhlIFJlc3BvbnNpdmUgTWVudSBvbiBNZW51IEl0ZW0gQ2xpY2tcclxuJCgnLm5hdmJhci1jb2xsYXBzZSB1bCBsaSBhJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcblx0JCgnLm5hdmJhci10b2dnbGU6dmlzaWJsZScpLmNsaWNrKCk7XHJcbn0pO1xyXG5cclxuLy8gc2xpZGVyXHJcbiQoJy5ieHNsaWRlcicpLmJ4U2xpZGVyKHtcclxuXHRwYWdlcjogZmFsc2UsXHJcblx0c3BlZWQ6IDEwMDAsXHJcbiAgICBzbGlkZU1hcmdpbjogMCxcclxuXHRwcmV2VGV4dDogJzxpIGNsYXNzPVwiZmEgZmEtYW5nbGUtbGVmdFwiPjwvaT4nLFxyXG5cdG5leHRUZXh0OiAnPGkgY2xhc3M9XCJmYSBmYS1hbmdsZS1yaWdodFwiPjwvaT4nLFxyXG5cdGVhc2luZzogJ2Vhc2UtaW4tb3V0J1xyXG59KTsiXSwiZmlsZSI6Ii4vcmVzb3VyY2VzL2Fzc2V0cy9mcm9udC9qcy9tb296LnNjcmlwdHMubWluLmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/front/js/mooz.scripts.min.js\n");

            /***/
        })

        /******/
    });
    /************************************************************************/
    /******/
    /******/ 	// startup
    /******/ 	// Load entry module and return exports
    /******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
    /******/
    __webpack_modules__["./resources/assets/front/js/jquery.bxslider.js"]();
    /******/
    __webpack_modules__["./resources/assets/front/js/bootstrap.min.js"]();
    /******/
    var __webpack_exports__ = {};
    /******/
    __webpack_modules__["./resources/assets/front/js/mooz.scripts.min.js"]();
    /******/
    /******/
})()
;
